! Generated with CubeGen
+META_MODEL:CUBE;
	+META_TYPE:INFORMATION_TYPE|;
		=PROPERTY:0|Name|;
		+META_TYPE:INFORMATION_TYPE_ELEMENT|;
			=PROPERTY:0|Sequence|;
			=PROPERTY:1|Suffix|;
			=PROPERTY:2|Domain| Values: CH(Text), NR(Number), DT(Date), TI(Time), TS(Timestamp);
			=PROPERTY:3|Length|;
			=PROPERTY:4|Decimals|;
			=PROPERTY:5|CaseSensitive| Values: Y(Yes), N(No);
			=PROPERTY:6|DefaultValue|;
			=PROPERTY:7|SpacesAllowed| Values: Y(Yes), N(No);
			=PROPERTY:8|Presentation|Indication how the string is presented in the user dialog. Values: LIN(Line), DES(Description), COD(Code);
			+META_TYPE:PERMITTED_VALUE|;
				=PROPERTY:0|Code|;
				=PROPERTY:1|Prompt|;
			-META_TYPE:PERMITTED_VALUE;
		-META_TYPE:INFORMATION_TYPE_ELEMENT;
	-META_TYPE:INFORMATION_TYPE;
	+META_TYPE:BUSINESS_OBJECT_TYPE|An object type related to the business supported by the system.;
		=PROPERTY:0|Name|;
		=PROPERTY:1|Directory|;
		+META_TYPE:TYPE|An entity type related to the business that is supported by the system.;
			=PROPERTY:0|Name|;
			=PROPERTY:1|Code|;
			=PROPERTY:2|FlagPartialKey| Values: Y(Yes), N(No);
			=PROPERTY:3|FlagRecursive| Values: Y(Yes), N(No);
			=PROPERTY:4|RecursiveCardinality| Values: 1(1), 2(2), 3(3), 4(4), 5(5), N(Many);
			=PROPERTY:5|Cardinality| Values: 1(1), 2(2), 3(3), 4(4), 5(5), N(Many);
			=PROPERTY:6|SortOrder| Values: N(No sort), K(Key), P(Position);
			=PROPERTY:7|Icon|;
			=PROPERTY:8|Transferable|Indication that in case of a recursive type the type may moved to an other parent in the hierarchy. Values: Y(Yes), N(No);
			+META_TYPE:ATTRIBUTE|;
				=PROPERTY:0|Name|Unique identifier of the attribute.;
				=PROPERTY:1|PrimaryKey|Indication that attribute is part of the unique identification of the type. Values: Y(Yes), N(No);
				=PROPERTY:2|CodeDisplayKey| Values: Y(Yes), S(Sub), N(No);
				=PROPERTY:3|CodeForeignKey| Values: N(None);
				=PROPERTY:4|FlagHidden| Values: Y(Yes), N(No);
				=PROPERTY:5|DefaultValue|Defaut value that overules the default value specified by the information type element.;
				=PROPERTY:6|Unchangeable|Indication that after the creation of the type the value of the atrribute can not be changed. Values: Y(Yes), N(No);
				=ASSOCIATION:INFORMATION_TYPE|HasDomain|INFORMATION_TYPE|;
				+META_TYPE:DERIVATION|;
					=PROPERTY:0|CubeTsgType| Values: DN(DENORMALIZATION), IN(INTERNAL), AG(AGGREGATION);
					=PROPERTY:1|AggregateFunction| Values: SUM(Sum), AVG(Average), MIN(Minimum), MAX(Maximum);
					=ASSOCIATION:DERIVATION_TYPE|ConcernsParent|TYPE|;
					=ASSOCIATION:DERIVATION_TYPE_CONCERNS_CHILD|ConcernsChild|TYPE|;
				-META_TYPE:DERIVATION;
				+META_TYPE:DESCRIPTION_ATTRIBUTE|;
					=PROPERTY:0|Text|;
				-META_TYPE:DESCRIPTION_ATTRIBUTE;
				+META_TYPE:RESTRICTION_TYPE_SPEC_ATB|;
					=PROPERTY:0|IncludeOrExclude|Indication that the attribute is valid (included) or invalid (excluded) for the concerning type specialisation. Values: IN(Include), EX(Exclude);
					=ASSOCIATION:TYPE_SPECIALISATION|IsValidFor|TYPE_SPECIALISATION|;
				-META_TYPE:RESTRICTION_TYPE_SPEC_ATB;
			-META_TYPE:ATTRIBUTE;
			+META_TYPE:REFERENCE|;
				=PROPERTY:0|Name|;
				=PROPERTY:1|PrimaryKey|Indication that reference is part of the unique identification of the type. Values: Y(Yes), N(No);
				=PROPERTY:2|CodeDisplayKey| Values: Y(Yes), S(Sub), N(No);
				=PROPERTY:3|Sequence|;
				=PROPERTY:4|Scope|In case of a recursive target%2C the definition of the collection of the types to select. Values: ALL(All), ENC(Encapsulated), PRA(Parents all), PR1(Parents first level), CHA(Children all), CH1(Children first level);
				=PROPERTY:5|Unchangeable|Indication that after the creation of the type the reference can not be changed. So in case of a recursive reference the indication too that the relation is used to select the parents or children in the hierarchy. Values: Y(Yes), N(No);
				=PROPERTY:6|WithinScopeLevel|In case of recursive %22wihin scope of%22 type the relative level in the hierarchy%2C Positive numbers are the parent levels%2C Negative numbers are the child levels.;
				=ASSOCIATION:REFERENCE_TYPE|Refer|TYPE|The target entity type of the reference.;
				=ASSOCIATION:REFERENCE_TYPE_WITHIN_SCOPE_OF|WithinScopeOf|TYPE|In case of non recursive target or a scope all recursive target the common type for the selection.;
				+META_TYPE:DESCRIPTION_REFERENCE|;
					=PROPERTY:0|Text|;
				-META_TYPE:DESCRIPTION_REFERENCE;
				+META_TYPE:RESTRICTION_TYPE_SPEC_REF|;
					=PROPERTY:0|IncludeOrExclude|Indication that the reference is valid (included) or invalid (excluded) for the concerning type specialisation. Values: IN(Include), EX(Exclude);
					=ASSOCIATION:TYPE_SPECIALISATION|IsValidFor|TYPE_SPECIALISATION|;
				-META_TYPE:RESTRICTION_TYPE_SPEC_REF;
			-META_TYPE:REFERENCE;
			+META_TYPE:TYPE_REUSE|;
				=PROPERTY:0|Cardinality| Values: 1(1), 2(2), 3(3), 4(4), 5(5), N(Many);
				=ASSOCIATION:TYPE_REUSE_TYPE|Refer|TYPE|;
			-META_TYPE:TYPE_REUSE;
			+META_TYPE:PARTITION|;
				=PROPERTY:0|Name|;
				+META_TYPE:SUBTYPE|;
					=PROPERTY:0|Name|;
				-META_TYPE:SUBTYPE;
			-META_TYPE:PARTITION;
			+META_TYPE:TYPE_SPECIALISATION_GROUP|;
				=PROPERTY:0|Code|;
				=PROPERTY:1|Name|;
				=PROPERTY:2|PrimaryKey|Indication that the type specification group is part of the unique identification of the type. Values: Y(Yes), N(No);
				+META_TYPE:TYPE_SPECIALISATION|;
					=PROPERTY:0|Code|;
					=PROPERTY:1|Name|;
					=ASSOCIATION:TYPE_SPECIALISATION|Specialise|TYPE_SPECIALISATION|;
				-META_TYPE:TYPE_SPECIALISATION;
			-META_TYPE:TYPE_SPECIALISATION_GROUP;
			+META_TYPE:DESCRIPTION_TYPE|Test%0D%0AMet LF en %22 en %27  en %25    %25%0D%0AEInde;
				=PROPERTY:0|Text|;
			-META_TYPE:DESCRIPTION_TYPE;
		-META_TYPE:TYPE;
	-META_TYPE:BUSINESS_OBJECT_TYPE;
	+META_TYPE:SYSTEM|;
		=PROPERTY:0|Name|;
		=PROPERTY:1|Database|;
		=PROPERTY:2|Schema|;
		=PROPERTY:3|Password|;
		+META_TYPE:SYSTEM_BO_TYPE|;
			=ASSOCIATION:BUSINESS_OBJECT_TYPE|Has|BUSINESS_OBJECT_TYPE|;
		-META_TYPE:SYSTEM_BO_TYPE;
	-META_TYPE:SYSTEM;
	+META_TYPE:CUBE_GEN_DOCUMENTATION|A document to give an explanation of CubeGen based on examples.;
		=PROPERTY:0|Name|The name of the document.;
		=PROPERTY:1|Description|;
		=PROPERTY:2|DescriptionFunctions|Description for Template Function chapter.;
		+META_TYPE:CUBE_GEN_PARAGRAPH|;
			=PROPERTY:0|Id|Technical identifier.;
			=PROPERTY:1|Header|Text used as header and used in the index.;
			=PROPERTY:2|Description|;
			=PROPERTY:3|Example|An example to explain the paragraph. No example is indicated by a %27%23%27.;
		-META_TYPE:CUBE_GEN_PARAGRAPH;
		+META_TYPE:CUBE_GEN_EXAMPLE_MODEL|A view on the business object model with examples of functions based on the business object model.;
			=PROPERTY:0|Id|Technical identifier.;
			=PROPERTY:1|Header|Text used as header and used in the index.;
			=PROPERTY:2|IncludedObjectNames|The names of types that are included in the view of the business object model.;
			=PROPERTY:3|Description|;
			+META_TYPE:CUBE_GEN_EXAMPLE_OBJECT|A reference to a business object that is used in the examples.;
				=ASSOCIATION:BUSINESS_OBJECT_TYPE|UsesAsExample|BUSINESS_OBJECT_TYPE|;
			-META_TYPE:CUBE_GEN_EXAMPLE_OBJECT;
			+META_TYPE:CUBE_GEN_FUNCTION|A CubeGen function that has been explained with a template.;
				=PROPERTY:0|Id|Technical identifier.;
				=PROPERTY:1|Header|Text used as header and used in the index.;
				=PROPERTY:2|Description|;
				=PROPERTY:3|Template|CubeGen template used as example.;
			-META_TYPE:CUBE_GEN_FUNCTION;
		-META_TYPE:CUBE_GEN_EXAMPLE_MODEL;
		+META_TYPE:CUBE_GEN_TEMPLATE_FUNCTION|;
			=PROPERTY:0|Name|;
			=PROPERTY:1|IndicationLogical|Indication that the function is a locical expression used in a condition. Values: Y(Yes), N(No);
			=PROPERTY:2|Description|;
			=PROPERTY:3|Syntax|;
		-META_TYPE:CUBE_GEN_TEMPLATE_FUNCTION;
	-META_TYPE:CUBE_GEN_DOCUMENTATION;
-META_MODEL:CUBE;
+BUSINESS_OBJECT_TYPE[BOT-000000100040]:CUSTOMER|customer_files;
	+TYPE[TYP-000000100021]:CUSTOMER|CUS|N|N|N|N|N||Y;
		+ATTRIBUTE[ATB-000000100004]:RELATION_NUMBER|Y|Y|N|N||N;
		-ATTRIBUTE:RELATION_NUMBER;
		+ATTRIBUTE[ATB-000000100001]:NAME|N|N|N|N||N;
		-ATTRIBUTE:NAME;
	-TYPE:CUSTOMER;
-BUSINESS_OBJECT_TYPE:CUSTOMER;
+BUSINESS_OBJECT_TYPE[BOT-000000100024]:ORDER|order_directory;
	+TYPE[TYP-000000100020]:ORDER|ORD|N|N|N|N|N||Y;
		+ATTRIBUTE[ATB-000000100005]:NUMBER|N|N|N|N||N;
		-ATTRIBUTE:NUMBER;
		+ATTRIBUTE[ATB-000000100006]:DELIVERY_DATE|N|N|N|N||N;
		-ATTRIBUTE:DELIVERY_DATE;
		+ATTRIBUTE[ATB-000000100003]:DESCRIPTION|N|N|N|N||N;
		-ATTRIBUTE:DESCRIPTION;
		+REFERENCE[REF-000000100000]:IS_PLACED_BY|N|N|0|ALL|N|0;
			>REFERENCE_TYPE:TYP-000000100021;
		-REFERENCE:IS_PLACED_BY;
		+TYPE[TYP-000000100022]:ORDER_LINE|ORL|Y|N|N|N|N||Y;
			+REFERENCE[REF-000000100001]:CONCERNS|Y|Y|0|ALL|N|0;
				>REFERENCE_TYPE:TYP-000000100000;
			-REFERENCE:CONCERNS;
		-TYPE:ORDER_LINE;
	-TYPE:ORDER;
-BUSINESS_OBJECT_TYPE:ORDER;
+BUSINESS_OBJECT_TYPE[BOT-000000100025]:PRODUCT|product_definitions;
	+TYPE[TYP-000000100000]:PRODUCT|PRD|Y|N|N|N|N|PRODUCT|Y;
		+ATTRIBUTE[ATB-000000100007]:CODE|Y|Y|N|N||N;
		-ATTRIBUTE:CODE;
		+TYPE[TYP-000000100004]:PRODUCT_PART_APPLICATION|PPA|Y|N|N|N|N||Y;
			+ATTRIBUTE[ATB-000000100008]:CODE|Y|N|N|N||N;
			-ATTRIBUTE:CODE;
			+ATTRIBUTE[ATB-000000100010]:COUNT|N|N|N|N||N;
			-ATTRIBUTE:COUNT;
		-TYPE:PRODUCT_PART_APPLICATION;
		+TYPE[TYP-000000100002]:PRODUCTION_PROCES|PPR|N|N|N|N|N||Y;
			+ATTRIBUTE[ATB-000000100012]:PROCES_ID|Y|N|N|N||N;
			-ATTRIBUTE:PROCES_ID;
			+TYPE[TYP-000000100003]:PRODUCTION_PROCES_STEP|PPS|N|N|N|N|N||Y;
				+ATTRIBUTE[ATB-000000100013]:PROCES_STEP_ID|Y|N|N|N||N;
				-ATTRIBUTE:PROCES_STEP_ID;
				+ATTRIBUTE[ATB-000000100014]:DESCRIPTION|N|N|N|N||N;
				-ATTRIBUTE:DESCRIPTION;
			-TYPE:PRODUCTION_PROCES_STEP;
		-TYPE:PRODUCTION_PROCES;
	-TYPE:PRODUCT;
-BUSINESS_OBJECT_TYPE:PRODUCT;
+CUBE_GEN_DOCUMENTATION[CUB-000000100022]:Cube_Gen_Manual|CubeGen is essentially a copy with replace function. The input consists of two text files: the model file and the template file. The model file contains the parameters for replacing the labels that have been applied in the template file. The template file contains the source code provided with labels.%0AThe special thing about CubeGen is that the parameters have a hierarchical structure, which you can easily run through recursively.|;
	=CUBE_GEN_PARAGRAPH[CGP-000000100022]:CMDLINE|Command Line|The program can be run from the command line as a executable or as a Perl script.|cubegen.exe <model> <template> <code> <arguments> %0Aperl cubegen.pl <model> <template> <code> <arguments>%0A-%09<model>: Imported Cube Model textfile%0A-%09<template>: Imported CubeGen Template Textfile%0A-%09<code>: Textfile to generate%0A-%09<arguments>: Parameters used in template;
	=CUBE_GEN_PARAGRAPH[CGP-000000100041]:MDLSTRUC|Cube Model Structure|A Cube model is a hierachical structure of model elements.  An element can be a group of other elements. A group starts with a %22+%22 followed by a tag and ends with %22-%22 followed by the tag. In the case of a separate element the two lines can be merged into one line starting with a %22=%22.%0AThe structure can best be explained by an example:|+<tagA>:<prop0>%7C<prop1>%7C...%7CpropN%3B%0A%09=<tagB>:<prop0>%7C<prop1>%7C...%7CpropN%3B%0A%09+<tagC>:<prop0>%7C<prop1>%7C...%7CpropN%3B%0A%09%09=<tagD>:<prop0>%7C<prop1>%7C..%7CpropN%3B%0A%09-<tagC>:%3B%0A-<tagA>:%3B;
	+CUBE_GEN_EXAMPLE_MODEL[CGM-000000100022]:CASE1|First Impression||A simple example with a small model is used to give a first impression of the functionality of CubeGen.;
		+CUBE_GEN_EXAMPLE_OBJECT[CGO-000000100060]:;
			>BUSINESS_OBJECT_TYPE:BOT-000000100040;
		-CUBE_GEN_EXAMPLE_OBJECT:;
		+CUBE_GEN_EXAMPLE_OBJECT[CGO-000000100027]:;
			>BUSINESS_OBJECT_TYPE:BOT-000000100024;
		-CUBE_GEN_EXAMPLE_OBJECT:;
		+CUBE_GEN_EXAMPLE_OBJECT[CGO-000000100028]:;
			>BUSINESS_OBJECT_TYPE:BOT-000000100025;
		-CUBE_GEN_EXAMPLE_OBJECT:;
		=CUBE_GEN_FUNCTION[CGF-000000100024]:LOOP1|Iteration|The LOOP statement walks through the model elements for the specified type.|This is a list of the Busines Object Types:[[LOOP,BUSINESS_OBJECT_TYPE]]%0A-%09<<BUSINESS_OBJECT_TYPE:U>>[[ENDLOOP,BUSINESS_OBJECT_TYPE]];
		=CUBE_GEN_FUNCTION[CGF-000000100060]:SELECT1|Selection|The IF, ELSIF, ELSE structure makes a choice between texts based on conditions.|Explain selection:[[LOOP,BUSINESS_OBJECT_TYPE]][[IF:0=CUSTOMER]]%0A<<BUSINESS_OBJECT_TYPE>> concerns customers.[[ELSIF:0=ORDER]]%0A<<BUSINESS_OBJECT_TYPE>> concerns no customers but orders.[[ELSE]]%0A<<BUSINESS_OBJECT_TYPE>> concerns something else.[[ENDIF]][[ENDLOOP,BUSINESS_OBJECT_TYPE]];
		=CUBE_GEN_FUNCTION[CGF-000000100025]:REPL1|Replace|Replace a label with the model value.|[[LOOP,BUSINESS_OBJECT_TYPE]]Uppercase: <<BUSINESS_OBJECT_TYPE:U>>, <<BUSINESS_OBJECT_TYPE1:U>>%0ALowercase: <<BUSINESS_OBJECT_TYPE:L>>, <<BUSINESS_OBJECT_TYPE1:L>>%0ACamelcase: <<BUSINESS_OBJECT_TYPE:L>>, <<BUSINESS_OBJECT_TYPE1:C>>%0A%0A[[ENDLOOP,BUSINESS_OBJECT_TYPE]];
	-CUBE_GEN_EXAMPLE_MODEL:CASE1;
	+CUBE_GEN_EXAMPLE_MODEL[CGM-000000100040]:CASE2|Introduction Recursivity|TYPE|A first impression of going through a hierarchy in a recursive way.;
		+CUBE_GEN_EXAMPLE_OBJECT[CGO-000000100040]:;
			>BUSINESS_OBJECT_TYPE:BOT-000000100025;
		-CUBE_GEN_EXAMPLE_OBJECT:;
		=CUBE_GEN_FUNCTION[CGF-000000100040]:REPEAT1|Repeating Iteration|On the location of the REPEAT statement the loop has been repeated for all underlying elements of the same type.|[[LOOP,BUSINESS_OBJECT_TYPE]]Structure of <<BUSINESS_OBJECT_TYPE:C>>:[[LOOP,TYPE]]%0A-%09<<TYPE:C>>[[REPEAT:TAB]][[ENDLOOP,TYPE]]%0A[[ENDLOOP,BUSINESS_OBJECT_TYPE]];
	-CUBE_GEN_EXAMPLE_MODEL:CASE2;
	+CUBE_GEN_EXAMPLE_MODEL[CGM-000000100061]:CASE90|Model Enhancement|TYPE ATTRIBUTE REFERENCE|The CUBE development framework has steps in which a cube model is copied with a number of enhancements. CubeGen has functions especially for supporting these steps.;
		+CUBE_GEN_EXAMPLE_OBJECT[CGO-000000100083]:;
			>BUSINESS_OBJECT_TYPE:BOT-000000100040;
		-CUBE_GEN_EXAMPLE_OBJECT:;
		+CUBE_GEN_EXAMPLE_OBJECT[CGO-000000100084]:;
			>BUSINESS_OBJECT_TYPE:BOT-000000100024;
		-CUBE_GEN_EXAMPLE_OBJECT:;
		+CUBE_GEN_EXAMPLE_OBJECT[CGO-000000100085]:;
			>BUSINESS_OBJECT_TYPE:BOT-000000100025;
		-CUBE_GEN_EXAMPLE_OBJECT:;
		=CUBE_GEN_FUNCTION[CGF-000000100081]:WILDCARD|Wildcard|Instead of a tag, an %22*%22 can be used to apply a template function for all model elements.%0AThe VALUE function is used to copy a specified number of model element values.|! Copied model[[LOOP,*]]%0A+<<*TAG>>[[IF:EVAL:'<<*:I>>'ne'']][<<*:I>>][[ENDIF]]:[[VALUE,*:0>N:%7C]]%3B[[REPEAT:TAB]][[LOOP,>*]]%0A%09><<*TAG>>:<<*:I>>%3B[[ENDLOOP,>*]]%0A-<<*TAG>>:%3B[[ENDLOOP,*]];
		=CUBE_GEN_FUNCTION[CGF-000000100082]:ENHANCE|Enhance Model|In the generic model copy function texts can be added as specific enhancements. The TAG condition has been added to select the concerning model elements.|! Model enhanced with foreign keys[[LOOP,*]]%0A+<<*TAG>>[[IF:EVAL:'<<*:I>>'ne'']][<<*:I>>][[ENDIF]]:[[VALUE,*:0>N:%7C]]%3B[[IF:TAG(TYPE)]][[LOOP,REFERENCE]][[LOOP,REFERENCE_TYPE]][[LOOP,ATTRIBUTE:1=Y]]%0A%09=FOREIGN_KEY:FK_<<REFERENCE_TYPE1>>_<<ATTRIBUTE>>%7C<<REFERENCE1>>%3B[[ENDLOOP,ATTRIBUTE]][[ENDLOOP,REFERENCE_TYPE]][[ENDLOOP,REFERENCE]][[ENDIF]][[REPEAT:TAB]][[LOOP,>*]]%0A%09><<*TAG>>:<<*:I>>%3B[[ENDLOOP,>*]]%0A-<<*TAG>>:%3B[[ENDLOOP,*]];
	-CUBE_GEN_EXAMPLE_MODEL:CASE90;
	=CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100000]:IF|N|Export a template segment that applies to a condition.|[[IF:<condition>]] ... [[ENDIF]]%0A[[IF,<tag>:<condition>]] ... [[ELSIF,<tag>:<condition>]] ... [[ELSE]] ... [[ENDIF]];
	=CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100001]:LOOP|N|Export the template segment for the model elements of the specified type in sequential order .|[[LOOP,<tag>]] ... [[ENDLOOP,<tag>]]%0A[[LOOP,<tag>:<condition>]] ... [[ENDLOOP,<tag>]];
	=CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100002]:REPEAT|N|Repeat the LOOP function for all underlying model elements of the specified type.|[[LOOP,<tag>]] ... [[REPEAT]] ... [[ENDLOOP,<tag>]]%0A[[LOOP,<tag>]] ... [[LOOP...]] ... [[REPEAT,<tag>:TAB]] ... [[ENDLOOP...]] ... [[ENDLOOP,<tag>]];
	=CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100003]:VALUE|N|Export the properties of a model element.|[[VALUE,<tag>:<loop_spec>:<separator>]];
	=CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100020]:TAG|Y|Check for the type of the actual model element.|TAG(<tag>);
-CUBE_GEN_DOCUMENTATION:Cube_Gen_Manual;
