! CubeGenManualModel
!
+CUBE_GEN_DOCUMENTATION:Cube_Gen_Manual|CubeGen is essentially a copy with replace function. The input consists of two text files: the model file and the template file. The model file contains the parameters for replacing the labels that have been applied in the template file. The template file contains the source code provided with labels.%0AThe special thing about CubeGen is that the parameters have a hierarchical structure, which you can easily run through recursively.;
	+CUBE_GEN_PARAGRAPH[CGP-000000100022]:CMDLINE|Command Line|The program can be run from the command line as a executable or as a Perl script.|cubegen.exe %3Cmodel%3E %3Ctemplate%3E %3Ccode%3E %3Carguments%3E %0Aperl cubegen.pl %3Cmodel%3E %3Ctemplate%3E %3Ccode%3E %3Carguments%3E%0A-%09%3Cmodel%3E: Imported Cube Model textfile%0A-%09%3Ctemplate%3E: Imported CubeGen Template Textfile%0A-%09%3Ccode%3E: Textfile to generate%0A-%09%3Carguments%3E: Parameters used in template;
	-CUBE_GEN_PARAGRAPH:;
	+CUBE_GEN_PARAGRAPH[CGP-000000100041]:MDLSTRUC|Cube Model Structure|A Cube model is a hierachical structure of model elements.  An element can be a group of other elements. A group starts with a %22+%22 followed by a tag and ends with %22-%22 followed by the tag. In the case of a separate element the two lines can be merged into one line starting with a %22=%22.%0AThe structure can best be explained by an example:|+%3CtagA%3E:%3Cprop0%3E%7C%3Cprop1%3E%7C...%7CpropN%3B%0A%09=%3CtagB%3E:%3Cprop0%3E%7C%3Cprop1%3E%7C...%7CpropN%3B%0A%09+%3CtagC%3E:%3Cprop0%3E%7C%3Cprop1%3E%7C...%7CpropN%3B%0A%09%09=%3CtagD%3E:%3Cprop0%3E%7C%3Cprop1%3E%7C..%7CpropN%3B%0A%09-%3CtagC%3E:%3B%0A-%3CtagA%3E:%3B;
	-CUBE_GEN_PARAGRAPH:;
	+CUBE_GEN_EXAMPLE_MODEL[CGM-000000100022]:CASE1|First Impression||A simple example is used to give a first impression of the functionality of CubeGen.;
		+CUBE_GEN_FUNCTION[CGF-000000100024]:LOOP1|Iteration|The LOOP statement walks through the model elements for the specified element type.|This is a list of the Busines Object Types:%5B%5BLOOP,BUSINESS_OBJECT_TYPE%5D%5D%0A-%09%3C%3CBUSINESS_OBJECT_TYPE:U%3E%3E%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_GEN_FUNCTION[CGF-000000100060]:SELECT1|Selection|The IF, ELSIF, ELSE structure makes a choice between texts based on conditions.|Explain selection:%5B%5BLOOP,BUSINESS_OBJECT_TYPE%5D%5D%5B%5BIF:0=CUSTOMER%5D%5D%0A%3C%3CBUSINESS_OBJECT_TYPE%3E%3E concerns customers.%5B%5BELSIF:0=ORDER%5D%5D%0A%3C%3CBUSINESS_OBJECT_TYPE%3E%3E concerns no customers but orders.%5B%5BELSE%5D%5D%0A%3C%3CBUSINESS_OBJECT_TYPE%3E%3E concerns something else.%5B%5BENDIF%5D%5D%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_GEN_FUNCTION[CGF-000000100025]:REPL1|Replace|Replace a label with the model value.|%5B%5BLOOP,BUSINESS_OBJECT_TYPE%5D%5DUppercase: %3C%3CBUSINESS_OBJECT_TYPE:U%3E%3E, %3C%3CBUSINESS_OBJECT_TYPE1:U%3E%3E%0ALowercase: %3C%3CBUSINESS_OBJECT_TYPE:L%3E%3E, %3C%3CBUSINESS_OBJECT_TYPE1:L%3E%3E%0ACamelcase: %3C%3CBUSINESS_OBJECT_TYPE:L%3E%3E, %3C%3CBUSINESS_OBJECT_TYPE1:C%3E%3E%0A%0A%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_MODEL:;
			+BUSINESS_OBJECT_TYPE[CASE1-BOT-000000100040]:CUSTOMER|customer_files;
			-BUSINESS_OBJECT_TYPE:;
			+BUSINESS_OBJECT_TYPE[CASE1-BOT-000000100024]:ORDER|order_directory;
			-BUSINESS_OBJECT_TYPE:;
			+BUSINESS_OBJECT_TYPE[CASE1-BOT-000000100025]:PRODUCT|product_definitions;
			-BUSINESS_OBJECT_TYPE:;
		-CUBE_MODEL:;
	-CUBE_GEN_EXAMPLE_MODEL:;
	+CUBE_GEN_EXAMPLE_MODEL[CGM-000000100040]:CASE2|Introduction Recursivity|TYPE|A first impression of going through a hierarchy in a recursive way.;
		+CUBE_GEN_FUNCTION[CGF-000000100040]:REPEAT1|Repeating Iteration|On the location of the REPEAT statement the loop has been repeated for all underlying elements of the same type.|%5B%5BLOOP,BUSINESS_OBJECT_TYPE%5D%5DStructure of %3C%3CBUSINESS_OBJECT_TYPE:C%3E%3E:%5B%5BLOOP,TYPE%5D%5D%0A-%09%3C%3CTYPE:C%3E%3E%5B%5BREPEAT:TAB%5D%5D%5B%5BENDLOOP,TYPE%5D%5D%0A%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_MODEL:;
			+BUSINESS_OBJECT_TYPE[CASE2-BOT-000000100025]:PRODUCT|product_definitions;
				+TYPE[CASE2-TYP-000000100000]:PRODUCT|PRD|Y;
					+TYPE[CASE2-TYP-000000100004]:PRODUCT_PART_APPLICATION|PPA|Y;
					-TYPE:;
					+TYPE[CASE2-TYP-000000100002]:PRODUCTION_PROCES|PPR|N;
						+TYPE[CASE2-TYP-000000100003]:PRODUCTION_PROCES_STEP|PPS|N;
						-TYPE:;
					-TYPE:;
				-TYPE:;
			-BUSINESS_OBJECT_TYPE:;
		-CUBE_MODEL:;
	-CUBE_GEN_EXAMPLE_MODEL:;
	+CUBE_GEN_EXAMPLE_MODEL[CGM-000000100061]:CASE90|Model Enhancement|TYPE ATTRIBUTE REFERENCE|The CUBE development framework has steps in which a cube model is copied with a number of enhancements. CubeGen has functions especially for supporting these steps.;
		+CUBE_GEN_FUNCTION[CGF-000000100081]:WILDCARD|Wildcard|Instead of a tag, an %22*%22 can be used to apply a template function for all model elements.%0AThe VALUE function is used to copy a specified number of model element values.|! Copied model%5B%5BLOOP,*%5D%5D%0A+%3C%3C*TAG%3E%3E%5B%5BIF:EVAL:'%3C%3C*:I%3E%3E'ne''%5D%5D%5B%3C%3C*:I%3E%3E%5D%5B%5BENDIF%5D%5D:%5B%5BVALUE,*:0%3EN:%7C%5D%5D%3B%5B%5BREPEAT:TAB%5D%5D%5B%5BLOOP,%3E*%5D%5D%0A%09%3E%3C%3C*TAG%3E%3E:%3C%3C*:I%3E%3E%3B%5B%5BENDLOOP,%3E*%5D%5D%0A-%3C%3C*TAG%3E%3E:%3B%5B%5BENDLOOP,*%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_GEN_FUNCTION[CGF-000000100082]:ENHANCE|Enhance Model|In the generic model copy function texts can be added as specific enhancements. The TAG condition has been added to select the concerning model elements.|! Model enhanced with foreign keys%5B%5BLOOP,*%5D%5D%0A+%3C%3C*TAG%3E%3E%5B%5BIF:EVAL:'%3C%3C*:I%3E%3E'ne''%5D%5D%5B%3C%3C*:I%3E%3E%5D%5B%5BENDIF%5D%5D:%5B%5BVALUE,*:0%3EN:%7C%5D%5D%3B%5B%5BIF:TAG(TYPE)%5D%5D%5B%5BLOOP,REFERENCE%5D%5D%5B%5BLOOP,REFERENCE_TYPE%5D%5D%5B%5BLOOP,ATTRIBUTE:1=Y%5D%5D%0A%09=FOREIGN_KEY:FK_%3C%3CREFERENCE_TYPE1%3E%3E_%3C%3CATTRIBUTE%3E%3E%7C%3C%3CREFERENCE1%3E%3E%3B%5B%5BENDLOOP,ATTRIBUTE%5D%5D%5B%5BENDLOOP,REFERENCE_TYPE%5D%5D%5B%5BENDLOOP,REFERENCE%5D%5D%5B%5BENDIF%5D%5D%5B%5BREPEAT:TAB%5D%5D%5B%5BLOOP,%3E*%5D%5D%0A%09%3E%3C%3C*TAG%3E%3E:%3C%3C*:I%3E%3E%3B%5B%5BENDLOOP,%3E*%5D%5D%0A-%3C%3C*TAG%3E%3E:%3B%5B%5BENDLOOP,*%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_MODEL:;
			+BUSINESS_OBJECT_TYPE[CASE90-BOT-000000100040]:CUSTOMER|customer_files;
				+TYPE[CASE90-TYP-000000100021]:CUSTOMER|CUS|N;
					+ATTRIBUTE[CASE90-ATB-000000100004]:RELATION_NUMBER|Y;
					-ATTRIBUTE:;
					+ATTRIBUTE[CASE90-ATB-000000100001]:NAME|N;
					-ATTRIBUTE:;
				-TYPE:;
			-BUSINESS_OBJECT_TYPE:;
			+BUSINESS_OBJECT_TYPE[CASE90-BOT-000000100024]:ORDER|order_directory;
				+TYPE[CASE90-TYP-000000100020]:ORDER|ORD|N;
					+ATTRIBUTE[CASE90-ATB-000000100005]:NUMBER|N;
					-ATTRIBUTE:;
					+ATTRIBUTE[CASE90-ATB-000000100006]:DELIVERY_DATE|N;
					-ATTRIBUTE:;
					+ATTRIBUTE[CASE90-ATB-000000100003]:DESCRIPTION|N;
					-ATTRIBUTE:;
					+REFERENCE[CASE90-REF-000000100000]:IS_PLACED_BY|N;
						>REFERENCE_TYPE:CASE90-TYP-000000100021;
					-REFERENCE:;
					+TYPE[CASE90-TYP-000000100022]:ORDER_LINE|ORL|Y;
						+REFERENCE[CASE90-REF-000000100001]:CONCERNS|Y;
							>REFERENCE_TYPE:CASE90-TYP-000000100000;
						-REFERENCE:;
					-TYPE:;
				-TYPE:;
			-BUSINESS_OBJECT_TYPE:;
			+BUSINESS_OBJECT_TYPE[CASE90-BOT-000000100025]:PRODUCT|product_definitions;
				+TYPE[CASE90-TYP-000000100000]:PRODUCT|PRD|Y;
					+ATTRIBUTE[CASE90-ATB-000000100007]:CODE|Y;
					-ATTRIBUTE:;
					+TYPE[CASE90-TYP-000000100004]:PRODUCT_PART_APPLICATION|PPA|Y;
						+ATTRIBUTE[CASE90-ATB-000000100008]:CODE|Y;
						-ATTRIBUTE:;
						+ATTRIBUTE[CASE90-ATB-000000100010]:COUNT|N;
						-ATTRIBUTE:;
					-TYPE:;
					+TYPE[CASE90-TYP-000000100002]:PRODUCTION_PROCES|PPR|N;
						+ATTRIBUTE[CASE90-ATB-000000100012]:PROCES_ID|Y;
						-ATTRIBUTE:;
						+TYPE[CASE90-TYP-000000100003]:PRODUCTION_PROCES_STEP|PPS|N;
							+ATTRIBUTE[CASE90-ATB-000000100013]:PROCES_STEP_ID|Y;
							-ATTRIBUTE:;
							+ATTRIBUTE[CASE90-ATB-000000100014]:DESCRIPTION|N;
							-ATTRIBUTE:;
						-TYPE:;
					-TYPE:;
				-TYPE:;
			-BUSINESS_OBJECT_TYPE:;
		-CUBE_MODEL:;
	-CUBE_GEN_EXAMPLE_MODEL:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100000]:IF|%5B%5BIF:%3Ccondition%3E%5D%5D ... %5B%5BENDIF%5D%5D%0A%5B%5BIF,%3Ctag%3E:%3Ccondition%3E%5D%5D ... %5B%5BELSIF,%3Ctag%3E:%3Ccondition%3E%5D%5D ... %5B%5BELSE%5D%5D ... %5B%5BENDIF%5D%5D;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100001]:LOOP|%5B%5BLOOP,%3Ctag%3E%5D%5D ... %5B%5BENDLOOP,%3Ctag%3E%5D%5D%0A%5B%5BLOOP,%3Ctag%3E:%3Ccondition%3E%5D%5D ... %5B%5BENDLOOP,%3Ctag%3E%5D%5D;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100002]:REPEAT|%5B%5BLOOP,%3Ctag%3E%5D%5D ... %5B%5BREPEAT%5D%5D ... %5B%5BENDLOOP,%3Ctag%3E%5D%5D%0A%5B%5BLOOP,%3Ctag%3E%5D%5D ... %5B%5BLOOP...%5D%5D ... %5B%5BREPEAT,%3Ctag%3E:TAB%5D%5D ... %5B%5BENDLOOP...%5D%5D ... %5B%5BENDLOOP,%3Ctag%3E%5D%5D;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100003]:VALUE|%5B%5BVALUE,%3Ctag%3E:%3Cloop_spec%3E:%3Cseparator%3E%5D%5D;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
-CUBE_GEN_DOCUMENTATION:;