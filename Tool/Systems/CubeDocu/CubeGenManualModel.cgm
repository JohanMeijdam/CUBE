! CubeGenManualModel
!
+CUBE_GEN_DOCUMENTATION:Cube_Gen_Manual|CubeGen is essentially a copy with replace function. The input consists of two text files: the model file and the template file. The model file contains the parameters for replacing the labels that have been applied in the template file. The template file contains the source code provided with labels.%0AThe special thing about CubeGen is that the parameters have a hierarchical structure, which you can easily run through recursively.|Functions that are applied In the templates to navigate through the hierarchy of the model elements and then export the selected template segments. In addition to navigation functions, there are functions for replacing the labels in the texts to be exported.|The logical functions are the elements of the logical expressions.;
	+CUBE_GEN_PARAGRAPH[CGP-000000100022]:CMDLINE|Command Line|The program can be run from the command line as a executable or as a Perl script.|cubegen.exe %3Cmodel%3E %3Ctemplate%3E %3Ccode%3E %3Carguments%3E %0Aperl cubegen.pl %3Cmodel%3E %3Ctemplate%3E %3Ccode%3E %3Carguments%3E%0A-%09%3Cmodel%3E: Imported Cube Model textfile%0A-%09%3Ctemplate%3E: Imported CubeGen Template Textfile%0A-%09%3Ccode%3E: Textfile to generate%0A-%09%3Cparameters%3E: Arguments that can be referenced in the template;
	-CUBE_GEN_PARAGRAPH:;
	+CUBE_GEN_PARAGRAPH[CGP-000000100041]:MDLSTRUC|Cube Model Structure|A Cube model is a hierachical structure of model elements.  An element can be a group of other elements. A group starts with a %22+%22 followed by a tag and ends with %22-%22 followed by the tag. In the case of a separate element the two lines can be merged into one line starting with a %22=%22. A model element can have an idenfier specified between brackets.%0AThe structure can best be explained by an example:|+%3CtagA%3E%5B%3CidentA%5D:%3Cprop0%3E%7C%3Cprop1%3E%7C...%7CpropN%3B%0A%09=%3CtagB%3E%5B%3CidentB%5D:%3Cprop0%3E%7C%3Cprop1%3E%7C...%7CpropN%3B%0A%09+%3CtagC%3E%5B%3CidentC%5D:%3Cprop0%3E%7C%3Cprop1%3E%7C...%7CpropN%3B%0A%09%09=%3CtagD%3E%5B%3CidentD%5D:%3Cprop0%3E%7C%3Cprop1%3E%7C..%7CpropN%3B%0A%09-%3CtagC%3E:%3B%0A-%3CtagA%3E:%3B;
	-CUBE_GEN_PARAGRAPH:;
	+CUBE_GEN_PARAGRAPH[CGP-000000100060]:RGUIDE|Reading Guide|In the first part the functions are explained with examples. The input and output of CubeGen have a background color that match the arrows in the above logo. When the content of a Model or Template is changed, the concernded Code is regenerated by pressing the CubeGen button.%0AInternet Explorer users have to take the following into account:%0A-%09A new line in the Model or Template has to be added with shift-Enter.%0A-%09When the code is regenerated the tab characters are presented as a single space.%0AThe second part contains an overview of the template functions and the logical functions.%0A|#;
	-CUBE_GEN_PARAGRAPH:;
	+CUBE_GEN_EXAMPLE_MODEL[CGM-000000100022]:CASE1|First Impression||A simple example with a small model is used to give a first impression of the functionality of CubeGen.;
		+CUBE_GEN_FUNCTION[CGF-000000100024]:LOOP1|Iteration Stack|The LOOP statement walks through the model elements for the specified type. For each nested LOOP a model element is placed on the stack. By default, reference is made to the last model element placed on the stack. By means of a tag and location, reference can be made to every model element on the stack.%0ALocation %221%22 refers to the first model element that is placed on the stack for the relevant tag. Location %22N%22 shows the most recent. A calculation can refer to an intermediate model element. For example, location %22N-1%22 refers to the second to last.|This is a list of the Busines Object Types:%5B%5BLOOP,BUSINESS_OBJECT_TYPE%5D%5D%0A-%09%3C%3CBUSINESS_OBJECT_TYPE:U%3E%3E%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_GEN_FUNCTION[CGF-000000100060]:SELECT1|Selection|The IF, ELSIF, ELSE structure makes a choice between texts based on conditions (logical_expressions).|Explain selection:%5B%5BLOOP,BUSINESS_OBJECT_TYPE%5D%5D%5B%5BIF:0=CUSTOMER%5D%5D%0A%3C%3CBUSINESS_OBJECT_TYPE%3E%3E concerns customers.%5B%5BELSIF:0=ORDER%5D%5D%0A%3C%3CBUSINESS_OBJECT_TYPE%3E%3E concerns no customers but orders.%5B%5BELSE%5D%5D%0A%3C%3CBUSINESS_OBJECT_TYPE%3E%3E concerns something else.%5B%5BENDIF%5D%5D%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_GEN_FUNCTION[CGF-000000100025]:REPL1|Replacement|Replace a label with the model value. By default, a label refers to the value of the first property of the model element. A number behind the tag refers to the other properties. For example, a 1 refers to the next following property, so the second one.|%5B%5BLOOP,BUSINESS_OBJECT_TYPE%5D%5DUnchanged: %3C%3CBUSINESS_OBJECT_TYPE%3E%3E, %3C%3CBUSINESS_OBJECT_TYPE2%3E%3E%0AUppercase: %3C%3CBUSINESS_OBJECT_TYPE:U%3E%3E, %3C%3CBUSINESS_OBJECT_TYPE2:U%3E%3E%0ALowercase: %3C%3CBUSINESS_OBJECT_TYPE:L%3E%3E, %3C%3CBUSINESS_OBJECT_TYPE2:L%3E%3E%0ACamelcase: %3C%3CBUSINESS_OBJECT_TYPE:L%3E%3E, %3C%3CBUSINESS_OBJECT_TYPE2:C%3E%3E%0A%0A%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_MODEL:;
			+BUSINESS_OBJECT_TYPE[CASE1-BOT-000000100040]:CUSTOMER|EXT|customer_files;
			-BUSINESS_OBJECT_TYPE:;
			+BUSINESS_OBJECT_TYPE[CASE1-BOT-000000100024]:ORDER|INT|order_directory;
			-BUSINESS_OBJECT_TYPE:;
			+BUSINESS_OBJECT_TYPE[CASE1-BOT-000000100025]:PRODUCT|INT|product_definitions;
			-BUSINESS_OBJECT_TYPE:;
		-CUBE_MODEL:;
	-CUBE_GEN_EXAMPLE_MODEL:;
	+CUBE_GEN_EXAMPLE_MODEL[CGM-000000100040]:CASE2|Introduction Recursivity|TYPE|A first impression of going through a hierarchy in a recursive way.;
		+CUBE_GEN_FUNCTION[CGF-000000100040]:REPEAT1|Repeating Iteration|On the location of the REPEAT statement the loop has been repeated for all underlying elements of the same type.|%5B%5BLOOP,BUSINESS_OBJECT_TYPE%5D%5DStructure of %3C%3CBUSINESS_OBJECT_TYPE:C%3E%3E:%5B%5BLOOP,TYPE%5D%5D%0A-%09%3C%3CTYPE:C%3E%3E%5B%5BREPEAT:TAB%5D%5D%5B%5BENDLOOP,TYPE%5D%5D%0A%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_MODEL:;
			+BUSINESS_OBJECT_TYPE[CASE2-BOT-000000100025]:PRODUCT|INT|product_definitions;
				+TYPE[CASE2-TYP-000000100000]:PRODUCT|PRD|Y;
					+TYPE[CASE2-TYP-000000100004]:PRODUCT_PART_APPLICATION|PPA|Y;
					-TYPE:;
					+TYPE[CASE2-TYP-000000100002]:PRODUCTION_PROCES|PPR|N;
						+TYPE[CASE2-TYP-000000100003]:PRODUCTION_PROCES_STEP|PPS|N;
						-TYPE:;
					-TYPE:;
				-TYPE:;
			-BUSINESS_OBJECT_TYPE:;
		-CUBE_MODEL:;
	-CUBE_GEN_EXAMPLE_MODEL:;
	+CUBE_GEN_EXAMPLE_MODEL[CGM-000000100101]:CASE10|Model References|TYPE REFERENCE|A model element can also have references to other model elements. These model lines start with %22%3E%22 and have an alias followed by the identifier of the target model element.;
		+CUBE_GEN_FUNCTION[CGF-000000100142]:LOOPREF1|Reference Processing|The LOOP statement also processes the references as they are model elements.|List of References:%5B%5BLOOP,BUSINESS_OBJECT_TYPE%5D%5D%5B%5BLOOP,TYPE%5D%5D%5B%5BLOOP,REFERENCE%5D%5D%5B%5BLOOP,REFERENCE_TYPE%5D%5D%0A%3C%3CTYPE:C%3E%3E %3C%3CREFERENCE:C%3E%3E %3C%3CREFERENCE_TYPE:C%3E%3E%5B%5BENDLOOP,REFERENCE_TYPE%5D%5D%5B%5BENDLOOP,REFERENCE%5D%5D%5B%5BREPEAT%5D%5D%5B%5BENDLOOP,TYPE%5D%5D%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_GEN_FUNCTION[CGF-000000100143]:LOOPPAR1|Parent Processing|With a %22^%22 in front of the tag, the LOOP statement also processes the parents as they are chiild model elements.|List of References with parent:%5B%5BLOOP,BUSINESS_OBJECT_TYPE%5D%5D%5B%5BLOOP,TYPE%5D%5D%5B%5BLOOP,REFERENCE%5D%5D%5B%5BLOOP,REFERENCE_TYPE%5D%5D%0A%3C%3CTYPE:C%3E%3E %3C%3CREFERENCE:C%3E%3E %3C%3CREFERENCE_TYPE:C%3E%3E (%3C%3CREFERENCE_TYPE1:U%3E%3E)%5B%5BLOOP,^BUSINESS_OBJECT_TYPE%5D%5D%0A-%09Business Object Type: %3C%3C^BUSINESS_OBJECT_TYPE:C%3E%3E (%3C%3C^BUSINESS_OBJECT_TYPE2:C%3E%3E)%5B%5BENDLOOP,^BUSINESS_OBJECT_TYPE%5D%5D%5B%5BENDLOOP,REFERENCE_TYPE%5D%5D%5B%5BENDLOOP,REFERENCE%5D%5D%5B%5BREPEAT%5D%5D%5B%5BENDLOOP,TYPE%5D%5D%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_GEN_FUNCTION[CGF-000000100200]:LOOPINV1|Inversion Processing|With a %22*%22 in front of the tag, the LOOP statement processes the referenes in the inversed direction.|List of referenced types:%5B%5BLOOP,BUSINESS_OBJECT_TYPE%5D%5D%5B%5BLOOP,TYPE%5D%5D%5B%5BLOOP,*REFERENCE%5D%5D%0A%3C%3CTYPE:C%3E%3E is referenced by %5B%5BLOOP,^TYPE%5D%5D%3C%3C^TYPE:C%3E%3E%5B%5BENDLOOP,^TYPE%5D%5D with reference %3C%3CREFERENCE:C%3E%3E%5B%5BENDLOOP,*REFERENCE%5D%5D%5B%5BREPEAT%5D%5D%5B%5BENDLOOP,TYPE%5D%5D%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_MODEL:;
			+BUSINESS_OBJECT_TYPE[CASE10-BOT-000000100040]:CUSTOMER|EXT|customer_files;
				+TYPE[CASE10-TYP-000000100021]:CUSTOMER|CUS|N;
				-TYPE:;
			-BUSINESS_OBJECT_TYPE:;
			+BUSINESS_OBJECT_TYPE[CASE10-BOT-000000100024]:ORDER|INT|order_directory;
				+TYPE[CASE10-TYP-000000100020]:ORDER|ORD|N;
					+REFERENCE[CASE10-REF-000000100000]:IS_PLACED_BY|N;
						>REFERENCE_TYPE:CASE10-TYP-000000100021;
					-REFERENCE:;
					+TYPE[CASE10-TYP-000000100022]:ORDER_LINE|ORL|Y;
						+REFERENCE[CASE10-REF-000000100001]:CONCERNS|Y;
							>REFERENCE_TYPE:CASE10-TYP-000000100000;
						-REFERENCE:;
					-TYPE:;
				-TYPE:;
			-BUSINESS_OBJECT_TYPE:;
			+BUSINESS_OBJECT_TYPE[CASE10-BOT-000000100025]:PRODUCT|INT|product_definitions;
				+TYPE[CASE10-TYP-000000100000]:PRODUCT|PRD|Y;
					+TYPE[CASE10-TYP-000000100004]:PRODUCT_PART_APPLICATION|PPA|Y;
					-TYPE:;
					+TYPE[CASE10-TYP-000000100002]:PRODUCTION_PROCES|PPR|N;
						+TYPE[CASE10-TYP-000000100003]:PRODUCTION_PROCES_STEP|PPS|N;
						-TYPE:;
					-TYPE:;
				-TYPE:;
			-BUSINESS_OBJECT_TYPE:;
		-CUBE_MODEL:;
	-CUBE_GEN_EXAMPLE_MODEL:;
	+CUBE_GEN_EXAMPLE_MODEL[CGM-000000100120]:CASE20|Logical Expressions|TYPE|Logical expressions are used in the LOOP, IF, CHILD and PARENT functions. A logical expression consists of one logical function or one or more logical operators that combine logical functions.;
		+CUBE_GEN_FUNCTION[CGF-000000100243]:LOGIC0|Logical Operators|The logical operators are acting on the results of logical expressions. The precedence order of execution is first the NOT, then the AND, and finally the OR.  |Show the precedence of the logical operators:%5B%5BLOOP,BUSINESS_OBJECT_TYPE:1=EXT%5D%5D%0A True OR False  AND False = %5B%5BIF:1=EXT%5BOR%5D1=INT%5BAND%5D1=INT%5D%5DTrue%5B%5BELSE%5D%5DFalse%5B%5BENDIF%5D%5D%0A(True OR False) AND False = %5B%5BIF:(1=EXT%5BOR%5D1=INT)%5BAND%5D1=INT%5D%5DTrue%5B%5BELSE%5D%5DFalse%5B%5BENDIF%5D%5D%0A False OR NOT True AND False  = %5B%5BIF:1=INT%5BOR%5D!1=EXT%5BAND%5D1=INT%5D%5DTrue%5B%5BELSE%5D%5DFalse%5B%5BENDIF%5D%5D%0A False OR NOT(True AND False) = %5B%5BIF:1=INT%5BOR%5D!(1=EXT%5BAND%5D1=INT)%5D%5DTrue%5B%5BELSE%5D%5DFalse%5B%5BENDIF%5D%5D%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_GEN_FUNCTION[CGF-000000100244]:LOGIC3|Qualifier|A qualifier for a logical function can refer to a specific model element on the LOOP stack. This qualifier consists of a tag, possibly followed by a location on the stack. The dafault location is %22N%22, which is a reference to the last model element placed on the stack.|%5B%5BLOOP,BUSINESS_OBJECT_TYPE%5D%5D%5B%5BLOOP,TYPE%5D%5D%5B%5BIF:BUSINESS_OBJECT_TYPE.1=INT%5BAND%5DTYPE(1).2=Y%5D%5D%0A%3C%3CTYPE:C%3E%3E%5B%5BENDIF%5D%5D%5B%5BIF,TYPE(1):BUSINESS_OBJECT_TYPE.1=INT%5BAND%5D2=Y%5D%5D%0A%3C%3CTYPE:C%3E%3E%5B%5BENDIF%5D%5D%5B%5BREPEAT%5D%5D%5B%5BENDLOOP,TYPE%5D%5D%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_GEN_FUNCTION[CGF-000000100240]:LOGIC1|First and Last|The FIRST and LAST logical functions are referring to the first and last selected model element.|%5B%5BLOOP,BUSINESS_OBJECT_TYPE:1=INT%5D%5D%5B%5BIF:FIRST%5D%5DInternal Objects: %5B%5BENDIF%5D%5D%3C%3CBUSINESS_OBJECT_TYPE:C%3E%3E%5B%5BIF:!LAST%5D%5D, %5B%5BELSE%5D%5D%3B%0A%5B%5BENDIF%5D%5D%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D%5B%5BLOOP,BUSINESS_OBJECT_TYPE:1=EXT%5D%5D%5B%5BIF:FIRST%5D%5DExternal Objects: %5B%5BENDIF%5D%5D%3C%3CBUSINESS_OBJECT_TYPE:C%3E%3E%5B%5BIF:!LAST%5D%5D, %5B%5BELSE%5D%5D%3B%0A%5B%5BENDIF%5D%5D%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D%5B%5BLOOP,BUSINESS_OBJECT_TYPE:1=INV%5D%5D%5B%5BIF:FIRST%5D%5DInvalid Objects: %5B%5BENDIF%5D%5D%3C%3CBUSINESS_OBJECT_TYPE:C%3E%3E%5B%5BIF:!LAST%5D%5D, %5B%5BELSE%5D%5D%3B%0A%5B%5BENDIF%5D%5D%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_GEN_FUNCTION[CGF-000000100241]:LOGIC2|Parent and Child|The PARENT and CHILD logical functions are referring to relative locations in the hierarchy.|Type list:%5B%5BLOOP,BUSINESS_OBJECT_TYPE%5D%5D%5B%5BLOOP,TYPE%5D%5D%0A%5B%5BIF:PARENT(BUSINESS_OBJECT_TYPE:1=EXT)%5D%5DExternal%5B%5BELSE%5D%5DInternal%5B%5BENDIF%5D%5D %3C%3CTYPE:C%3E%3E%5B%5BIF:CHILD(TYPE)%5D%5D%0A- has child%5B%5BENDIF%5D%5D%5B%5BREPEAT%5D%5D%5B%5BENDLOOP,TYPE%5D%5D%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D%0A%0AList of internal objects with a child:%5B%5BLOOP,BUSINESS_OBJECT_TYPE%5D%5D%5B%5BLOOP,TYPE:PARENT(BUSINESS_OBJECT_TYPE:1=INT)%5BAND%5DCHILD(TYPE)%5D%5D%0A- %3C%3CTYPE:C%3E%3E%5B%5BREPEAT%5D%5D%5B%5BENDLOOP,TYPE%5D%5D%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_MODEL:;
			+BUSINESS_OBJECT_TYPE[CASE20-BOT-000000100040]:CUSTOMER|EXT|customer_files;
				+TYPE[CASE20-TYP-000000100021]:CUSTOMER|CUS|N;
				-TYPE:;
			-BUSINESS_OBJECT_TYPE:;
			+BUSINESS_OBJECT_TYPE[CASE20-BOT-000000100024]:ORDER|INT|order_directory;
				+TYPE[CASE20-TYP-000000100020]:ORDER|ORD|N;
					+TYPE[CASE20-TYP-000000100022]:ORDER_LINE|ORL|Y;
					-TYPE:;
				-TYPE:;
			-BUSINESS_OBJECT_TYPE:;
			+BUSINESS_OBJECT_TYPE[CASE20-BOT-000000100025]:PRODUCT|INT|product_definitions;
				+TYPE[CASE20-TYP-000000100000]:PRODUCT|PRD|Y;
					+TYPE[CASE20-TYP-000000100004]:PRODUCT_PART_APPLICATION|PPA|Y;
					-TYPE:;
					+TYPE[CASE20-TYP-000000100002]:PRODUCTION_PROCES|PPR|N;
						+TYPE[CASE20-TYP-000000100003]:PRODUCTION_PROCES_STEP|PPS|N;
						-TYPE:;
					-TYPE:;
				-TYPE:;
			-BUSINESS_OBJECT_TYPE:;
			+BUSINESS_OBJECT_TYPE[CASE20-BOT-000000100100]:FACTORY|INT|production_locations;
				+TYPE[CASE20-TYP-000000100100]:FACTORY|FCT|N;
					+TYPE[CASE20-TYP-000000100101]:FACTORY_HALL|FCH|N;
					-TYPE:;
				-TYPE:;
			-BUSINESS_OBJECT_TYPE:;
		-CUBE_MODEL:;
	-CUBE_GEN_EXAMPLE_MODEL:;
	+CUBE_GEN_EXAMPLE_MODEL[CGM-000000100080]:CASE30|Hierarchy Navigation|TYPE|Navigate through a hierarchy of model elements of one type selected in the active LOOP functions. For a better understanding of the examples, a coding is used for the tags of model elements.;
		+CUBE_GEN_FUNCTION[CGF-000000100101]:FORV1|Vertical navigation|In the hierarchy selected by LOOP functions, the FORV function navigates top down (vertical) through the model elements. The template segments for the selected model elements will be exported in the order of the loop specification. The loop specification consists of two locations separated by a %22%3E%22 as arrow and specifies which model elements are run through on the stack. Location references that fall outside the range are skipped.%0AWith the FORV function, the %22V%22 has been added for specifying the location. Next to the %22N%22 referring to the last placed on the stack, the %22V%22 refers to the model element selected in the FORV function. Also the V can be used in the expression.|Parents for all types (with types in between):%5B%5BLOOP,BUSINESS_OBJECT_TYPE%5D%5D%5B%5BLOOP,TYPE%5D%5D%0A%3C%3CTYPE%3E%3E: %5B%5BFORV:1%3EN-1:, %5D%5D%3C%3CTYPE%3E%3E(%5B%5BFORV:V+1%3EN-1:, %5D%5D%3C%3CTYPE%3E%3E%5B%5BENDFOR%5D%5D)%5B%5BENDFOR%5D%5D%5B%5BREPEAT%5D%5D%5B%5BENDLOOP,TYPE%5D%5D%0A%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_GEN_FUNCTION[CGF-000000100100]:FORH1|Horizontal Navigation|In the hierarchy selected by LOOP functions, the FORH function navigates on the same level (horizontal) through the model elements. The template segments for the selected model elements will be exported in the order of the loop specification. For the FORH function, the locations refer to the siblings in the hierarchy.|All types in the hierachy with their left and right siblings:%5B%5BLOOP,BUSINESS_OBJECT_TYPE%5D%5D%5B%5BLOOP,TYPE%5D%5D%5B%5BREPEAT%5D%5D%5B%5BIF:LAST%5D%5D%5B%5BFORH:1%3EN%5D%5D%0A%3C%3CTYPE%3E%3E left:%5B%5BFORH:V-1%3E1:,%5D%5D%3C%3CTYPE%3E%3E%5B%5BENDFOR%5D%5D right:%5B%5BFORH:V+1%3EN:,%5D%5D%3C%3CTYPE%3E%3E%5B%5BENDFOR%5D%5D%5B%5BENDFOR%5D%5D%5B%5BENDIF%5D%5D%5B%5BENDLOOP,TYPE%5D%5D%0A%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_GEN_FUNCTION[CGF-000000100120]:REPREF1|Replacement References|A replacement label refers to a model element property and can also refer to another model element on the LOOP stack.|All types (with root and parent) with the types in the branch (with parent and child):%5B%5BLOOP,BUSINESS_OBJECT_TYPE%5D%5D%5B%5BLOOP,TYPE%5D%5D%0A%3C%3CTYPE%3E%3E: Root=%3C%3CTYPE(1)%3E%3E Parent=%5B%5BIF:!ROOT%5D%5D%3C%3CTYPE(N-1)%3E%3E%5B%5BENDIF%5D%5D%5B%5BFOR:2%3EN-1%5D%5D%0A-%09%3C%3CTYPE%3E%3E Parent=%3C%3CTYPE(V-1)%3E%3E Child=%3C%3CTYPE(V+1)%3E%3E%5B%5BENDFOR%5D%5D%5B%5BREPEAT%5D%5D%5B%5BENDLOOP,TYPE%5D%5D%0A%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_MODEL:;
			+BUSINESS_OBJECT_TYPE[CASE30-BOT-000000100060]:AAA|INT|<b>Bold</b>%0ANormal;
				+TYPE[CASE30-TYP-000000100040]:AAA|AAA|N;
					+TYPE[CASE30-TYP-000000100041]:BBB1|BB1|N;
						+TYPE[CASE30-TYP-000000100048]:CCC11|C11|N;
							+TYPE[CASE30-TYP-000000100057]:DDD111|D01|N;
							-TYPE:;
						-TYPE:;
						+TYPE[CASE30-TYP-000000100049]:CCC12|C12|N;
							+TYPE[CASE30-TYP-000000100063]:DDD121|D11|N;
							-TYPE:;
							+TYPE[CASE30-TYP-000000100062]:DDD122|D12|N;
							-TYPE:;
						-TYPE:;
						+TYPE[CASE30-TYP-000000100050]:CCC13|C13|N;
							+TYPE[CASE30-TYP-000000100064]:DDD131|D21|N;
							-TYPE:;
							+TYPE[CASE30-TYP-000000100065]:DDD132|D22|N;
							-TYPE:;
							+TYPE[CASE30-TYP-000000100066]:DDD133|D23|N;
							-TYPE:;
						-TYPE:;
					-TYPE:;
					+TYPE[CASE30-TYP-000000100042]:BBB2|BB2|N;
						+TYPE[CASE30-TYP-000000100051]:CCC21|C21|N;
						-TYPE:;
						+TYPE[CASE30-TYP-000000100052]:CCC22|C22|N;
						-TYPE:;
						+TYPE[CASE30-TYP-000000100053]:CCC23|C2|N;
						-TYPE:;
					-TYPE:;
				-TYPE:;
			-BUSINESS_OBJECT_TYPE:;
		-CUBE_MODEL:;
	-CUBE_GEN_EXAMPLE_MODEL:;
	+CUBE_GEN_EXAMPLE_MODEL[CGM-000000100105]:CASE40|Replacement Functions||Manipulate the export of the model element texts or replace the references with model element properties.;
		+CUBE_GEN_FUNCTION[CGF-000000100182]:REPL4|Manipulate Text|Manipulate the exported text of the model element properties by a function.|%5B%5BLOOP,BUSINESS_OBJECT_TYPE:!0=AAA%5D%5DUnchanged: %3C%3CBUSINESS_OBJECT_TYPE%3E%3E, %3C%3CBUSINESS_OBJECT_TYPE2%3E%3E%0AUppercase: %3C%3CBUSINESS_OBJECT_TYPE:U%3E%3E, %3C%3CBUSINESS_OBJECT_TYPE2:U%3E%3E%0ALowercase: %3C%3CBUSINESS_OBJECT_TYPE:L%3E%3E, %3C%3CBUSINESS_OBJECT_TYPE2:L%3E%3E%0ACamelcase: %3C%3CBUSINESS_OBJECT_TYPE:L%3E%3E, %3C%3CBUSINESS_OBJECT_TYPE2:C%3E%3E%0A%0A%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_GEN_FUNCTION[CGF-000000100163]:REPL2|Property Replacements|Export a model property of the model element.|%5B%5BLOOP,BUSINESS_OBJECT_TYPE:!0=AAA%5D%5DUnique Number  : %3C%3CBUSINESS_OBJECT_TYPE:N%3E%3E%0ASub Number     : %3C%3CBUSINESS_OBJECT_TYPE:S%3E%3E (serial number within parent model element)%0AIndex          : %3C%3CBUSINESS_OBJECT_TYPE:IX%3E%3E (serial number within the LOOP selection)%0ACube Identifier: %3C%3CBUSINESS_OBJECT_TYPE:I%3E%3E%0A%0A%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_GEN_FUNCTION[CGF-000000100164]:REPL3|Character Escaping|Escape characters in the exported text of the model element properties by a function.|%5B%5BLOOP,BUSINESS_OBJECT_TYPE:0=AAA%5D%5DPlain text:%0A%3C%3CBUSINESS_OBJECT_TYPE2%3E%3E%0APercent escapes:%0A%3C%3CBUSINESS_OBJECT_TYPE2:P%3E%3E%0AHTML escapes (with HTML break):%0A%3C%3CBUSINESS_OBJECT_TYPE2:H%3E%3E%0AHTML escapes (with linefeed):%0A%3C%3CBUSINESS_OBJECT_TYPE2:HE%3E%3E%0A%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_GEN_FUNCTION[CGF-000000100220]:LOOPRF1|HTML / Percent Encoding|Apply the HTML escape or URI escacpe (Percent escape) functions to the text within the loop, using LOOP_HTML and LOOP_PERC functions.|The result of LOOP also presented In HTML and percentage escaping:%0A%5B%5BLOOP,BUSINESS_OBJECT_TYPE:!0=AAA%5D%5D%3C%3C%3CBUSINESS_OBJECT_TYPE:C%3E%3E/%3E%0A%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D%0AHTML: %0A%5B%5BLOOP_HTML,BUSINESS_OBJECT_TYPE:!0=AAA%5D%5D%3C%3C%3CBUSINESS_OBJECT_TYPE:C%3E%3E/%3E%0A%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D%0APERC: %0A%5B%5BLOOP_PERC,BUSINESS_OBJECT_TYPE:!0=AAA%5D%5D%3C%3C%3CBUSINESS_OBJECT_TYPE:C%3E%3E/%3E%0A%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D%0A;
		-CUBE_GEN_FUNCTION:;
		+CUBE_MODEL:;
			+BUSINESS_OBJECT_TYPE[CASE40-BOT-000000100060]:AAA|INT|<b>Bold</b>%0ANormal;
			-BUSINESS_OBJECT_TYPE:;
			+BUSINESS_OBJECT_TYPE[CASE40-BOT-000000100040]:CUSTOMER|EXT|customer_files;
			-BUSINESS_OBJECT_TYPE:;
			+BUSINESS_OBJECT_TYPE[CASE40-BOT-000000100024]:ORDER|INT|order_directory;
			-BUSINESS_OBJECT_TYPE:;
			+BUSINESS_OBJECT_TYPE[CASE40-BOT-000000100025]:PRODUCT|INT|product_definitions;
			-BUSINESS_OBJECT_TYPE:;
		-CUBE_MODEL:;
	-CUBE_GEN_EXAMPLE_MODEL:;
	+CUBE_GEN_EXAMPLE_MODEL[CGM-000000100140]:CASE45|Reusable Text||;
		+CUBE_GEN_FUNCTION[CGF-000000100245]:TEXT0|Text Blocks / Text Labels|Text blocks are defined for reuse of template segments. The text may contain labels that are replaced with arguments that are defined at the place where the text is applied. |%5B%5BTEXT,OBJECT_LIST%5D%5D%5B%5BLOOP,BUSINESS_OBJECT_TYPE:1=%3C%3CT1%3E%3E%5D%5D%5B%5BIF:FIRST%5D%5D%3C%3CT2%3E%3E Objects: %5B%5BENDIF%5D%5D%3C%3CBUSINESS_OBJECT_TYPE:C%3E%3E%5B%5BIF:!LAST%5D%5D, %5B%5BELSE%5D%5D%3B%0A%5B%5BENDIF%5D%5D%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D%5B%5BENDTEXT%5D%5D%0A%5B%5BBODY%5D%5D%3C%3CTEXT,OBJECT_LIST%5B%7C%5DINT%5B%7C%5DInternal%5B%7C%5D%3E%3E%3C%3CTEXT,OBJECT_LIST%5B%7C%5DEXT%5B%7C%5DExternal%5B%7C%5D%3E%3E%3C%3CTEXT,OBJECT_LIST%5B%7C%5DINV%5B%7C%5DInvalid%5B%7C%5D%3E%3E%5B%5BENDBODY%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_MODEL:;
			+BUSINESS_OBJECT_TYPE[CASE45-BOT-000000100040]:CUSTOMER|EXT|customer_files;
			-BUSINESS_OBJECT_TYPE:;
			+BUSINESS_OBJECT_TYPE[CASE45-BOT-000000100024]:ORDER|INT|order_directory;
			-BUSINESS_OBJECT_TYPE:;
			+BUSINESS_OBJECT_TYPE[CASE45-BOT-000000100025]:PRODUCT|INT|product_definitions;
			-BUSINESS_OBJECT_TYPE:;
			+BUSINESS_OBJECT_TYPE[CASE45-BOT-000000100100]:FACTORY|INT|production_locations;
			-BUSINESS_OBJECT_TYPE:;
		-CUBE_MODEL:;
	-CUBE_GEN_EXAMPLE_MODEL:;
	+CUBE_GEN_EXAMPLE_MODEL[CGM-000000100103]:CASE50|External Functions||Perl expressions can be used for special functionality that is not available as standard CubeGen functions.;
		+CUBE_GEN_FUNCTION[CGF-000000100160]:PERL1|Perl Expressions|The DECL and EVAL functions are performing the Perl eval statement. Only the EVAL function (not the logical expression) exports te result to the code. This can be suppressed by putting the Perl expression between parentheses.|Total length (bits) of the names:%5B%5BDECL:sub myLen{return 8*length(@_%5B0%5D)}%5D%5D%5B%5BLOOP,BUSINESS_OBJECT_TYPE%5D%5D%0A%5B%5BIF:EVAL:myLen('%3C%3CBUSINESS_OBJECT_TYPE%3E%3E')%3C48%5D%5DNext with one additional byte.%0A%5B%5BEVAL:($myC+=8)%5D%5D%5B%5BENDIF%5D%5D%3C%3CBUSINESS_OBJECT_TYPE%3E%3E: %5B%5BEVAL:$myC+=myLen('%3C%3CBUSINESS_OBJECT_TYPE%3E%3E')%5D%5D%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_MODEL:;
			+BUSINESS_OBJECT_TYPE[CASE50-BOT-000000100040]:CUSTOMER|EXT|customer_files;
			-BUSINESS_OBJECT_TYPE:;
			+BUSINESS_OBJECT_TYPE[CASE50-BOT-000000100025]:PRODUCT|INT|product_definitions;
			-BUSINESS_OBJECT_TYPE:;
			+BUSINESS_OBJECT_TYPE[CASE50-BOT-000000100024]:ORDER|INT|order_directory;
			-BUSINESS_OBJECT_TYPE:;
		-CUBE_MODEL:;
	-CUBE_GEN_EXAMPLE_MODEL:;
	+CUBE_GEN_EXAMPLE_MODEL[CGM-000000100104]:CASE60|Sequential Processing|TYPE ATTRIBUTE|Export the model elements in the order as they appaer in de Cube model.;
		+CUBE_GEN_FUNCTION[CGF-000000100162]:SEQU1|Sequential Iterations|The model elements referenced by the LOOP functions nested in the SEQUENCE function are exported in the order as they appear in the Cube model.|%5B%5BLOOP,BUSINESS_OBJECT_TYPE%5D%5DStructure of %3C%3CBUSINESS_OBJECT_TYPE:C%3E%3E:%5B%5BSEQUENCE%5D%5D%5B%5BLOOP,ATTRIBUTE%5D%5D%0A-%09Attribute: %3C%3CATTRIBUTE:C%3E%3E%5B%5BENDLOOP,ATTRIBUTE%5D%5D%5B%5BLOOP,TYPE%5D%5D%0A-%09Type: %3C%3CTYPE:C%3E%3E%5B%5BREPEAT:TAB%5D%5D%5B%5BENDLOOP,TYPE%5D%5D%5B%5BENDSEQUENCE%5D%5D%0A%5B%5BENDLOOP,BUSINESS_OBJECT_TYPE%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_MODEL:;
			+BUSINESS_OBJECT_TYPE[CASE60-BOT-000000100024]:ORDER|INT|order_directory;
				+TYPE[CASE60-TYP-000000100020]:ORDER|ORD|N;
					+ATTRIBUTE[CASE60-ATB-000000100005]:NUMBER|N;
					-ATTRIBUTE:;
					+ATTRIBUTE[CASE60-ATB-000000100006]:DELIVERY_DATE|N;
					-ATTRIBUTE:;
					+ATTRIBUTE[CASE60-ATB-000000100003]:DESCRIPTION|N;
					-ATTRIBUTE:;
					+TYPE[CASE60-TYP-000000100022]:ORDER_LINE|ORL|Y;
						+ATTRIBUTE[CASE60-ATB-000000100020]:NUMBER|Y;
						-ATTRIBUTE:;
						+ATTRIBUTE[CASE60-ATB-000000100021]:DESCRIPTION|N;
						-ATTRIBUTE:;
						=ATTRIBUTE[CASE60-ATB-000099900128]:STATUS|N;[[Extra Attribute to explain Sequence]]
					-TYPE:;
					=ATTRIBUTE[CASE60-ATB-000099900122]:STATUS|N;[[Extra Attribute to explain Sequence]]
				-TYPE:;
			-BUSINESS_OBJECT_TYPE:;
		-CUBE_MODEL:;
	-CUBE_GEN_EXAMPLE_MODEL:;
	+CUBE_GEN_EXAMPLE_MODEL[CGM-000000100061]:CASE90|Model Enhancement|TYPE ATTRIBUTE REFERENCE|The CUBE development framework has steps in which a cube model is copied with a number of enhancements. CubeGen has functions especially for supporting these steps.;
		+CUBE_GEN_FUNCTION[CGF-000000100081]:WILDCARD|Wildcard|Instead of a tag, an %22*%22 can be used to apply a template function for all model elements.%0AThe VALUE function is used to copy a specified number of model element values.|! Copied model%5B%5BLOOP,*%5D%5D%0A+%3C%3C*TAG%3E%3E%5B%5BIF:!ID()%5D%5D%5B%3C%3C*:I%3E%3E%5D%5B%5BENDIF%5D%5D:%5B%5BVALUE,*:0%3EN:%7C%5D%5D%3B%5B%5BREPEAT:TAB%5D%5D%5B%5BLOOP,%3E*%5D%5D%0A%09%3E%3C%3C*TAG%3E%3E:%3C%3C*:I%3E%3E%3B%5B%5BENDLOOP,%3E*%5D%5D%0A-%3C%3C*TAG%3E%3E:%3B%5B%5BENDLOOP,*%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_GEN_FUNCTION[CGF-000000100082]:ENHANCE|Enhance Model|In the generic model copy function texts can be added as specific enhancements. The TAG logical function has been added to select the concerning model elements.|! Model enhanced with foreign keys%5B%5BLOOP,*%5D%5D%0A+%3C%3C*TAG%3E%3E%5B%5BIF:!ID()%5D%5D%5B%3C%3C*:I%3E%3E%5D%5B%5BENDIF%5D%5D:%5B%5BVALUE,*:0%3EN:%7C%5D%5D%3B%5B%5BIF:TAG(TYPE)%5D%5D%5B%5BLOOP,REFERENCE%5D%5D%5B%5BLOOP,REFERENCE_TYPE%5D%5D%5B%5BLOOP,ATTRIBUTE:1=Y%5D%5D%0A%09=FOREIGN_KEY:FK_%3C%3CREFERENCE_TYPE1%3E%3E_%3C%3CATTRIBUTE%3E%3E%7C%3C%3CREFERENCE1%3E%3E%3B%5B%5BENDLOOP,ATTRIBUTE%5D%5D%5B%5BENDLOOP,REFERENCE_TYPE%5D%5D%5B%5BENDLOOP,REFERENCE%5D%5D%5B%5BENDIF%5D%5D%5B%5BREPEAT:TAB%5D%5D%5B%5BLOOP,%3E*%5D%5D%0A%09%3E%3C%3C*TAG%3E%3E:%3C%3C*:I%3E%3E%3B%5B%5BENDLOOP,%3E*%5D%5D%0A-%3C%3C*TAG%3E%3E:%3B%5B%5BENDLOOP,*%5D%5D;
		-CUBE_GEN_FUNCTION:;
		+CUBE_MODEL:;
			+BUSINESS_OBJECT_TYPE[CASE90-BOT-000000100040]:CUSTOMER|EXT|customer_files;
				+TYPE[CASE90-TYP-000000100021]:CUSTOMER|CUS|N;
					+ATTRIBUTE[CASE90-ATB-000000100004]:RELATION_NUMBER|Y;
					-ATTRIBUTE:;
					+ATTRIBUTE[CASE90-ATB-000000100001]:NAME|N;
					-ATTRIBUTE:;
				-TYPE:;
			-BUSINESS_OBJECT_TYPE:;
			+BUSINESS_OBJECT_TYPE[CASE90-BOT-000000100024]:ORDER|INT|order_directory;
				+TYPE[CASE90-TYP-000000100020]:ORDER|ORD|N;
					+ATTRIBUTE[CASE90-ATB-000000100005]:NUMBER|N;
					-ATTRIBUTE:;
					+ATTRIBUTE[CASE90-ATB-000000100006]:DELIVERY_DATE|N;
					-ATTRIBUTE:;
					+ATTRIBUTE[CASE90-ATB-000000100003]:DESCRIPTION|N;
					-ATTRIBUTE:;
					+REFERENCE[CASE90-REF-000000100000]:IS_PLACED_BY|N;
						>REFERENCE_TYPE:CASE90-TYP-000000100021;
					-REFERENCE:;
					+TYPE[CASE90-TYP-000000100022]:ORDER_LINE|ORL|Y;
						+ATTRIBUTE[CASE90-ATB-000000100020]:NUMBER|Y;
						-ATTRIBUTE:;
						+ATTRIBUTE[CASE90-ATB-000000100021]:DESCRIPTION|N;
						-ATTRIBUTE:;
						+REFERENCE[CASE90-REF-000000100001]:CONCERNS|Y;
							>REFERENCE_TYPE:CASE90-TYP-000000100000;
						-REFERENCE:;
					-TYPE:;
				-TYPE:;
			-BUSINESS_OBJECT_TYPE:;
			+BUSINESS_OBJECT_TYPE[CASE90-BOT-000000100025]:PRODUCT|INT|product_definitions;
				+TYPE[CASE90-TYP-000000100000]:PRODUCT|PRD|Y;
					+ATTRIBUTE[CASE90-ATB-000000100007]:CODE|Y;
					-ATTRIBUTE:;
					+TYPE[CASE90-TYP-000000100004]:PRODUCT_PART_APPLICATION|PPA|Y;
						+ATTRIBUTE[CASE90-ATB-000000100008]:CODE|Y;
						-ATTRIBUTE:;
						+ATTRIBUTE[CASE90-ATB-000000100010]:COUNT|N;
						-ATTRIBUTE:;
					-TYPE:;
					+TYPE[CASE90-TYP-000000100002]:PRODUCTION_PROCES|PPR|N;
						+ATTRIBUTE[CASE90-ATB-000000100012]:PROCES_ID|Y;
						-ATTRIBUTE:;
						+TYPE[CASE90-TYP-000000100003]:PRODUCTION_PROCES_STEP|PPS|N;
							+ATTRIBUTE[CASE90-ATB-000000100013]:PROCES_STEP_ID|Y;
							-ATTRIBUTE:;
							+ATTRIBUTE[CASE90-ATB-000000100014]:DESCRIPTION|N;
							-ATTRIBUTE:;
						-TYPE:;
					-TYPE:;
				-TYPE:;
			-BUSINESS_OBJECT_TYPE:;
		-CUBE_MODEL:;
	-CUBE_GEN_EXAMPLE_MODEL:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100151]:AND|Y|Perform the logical AND function on the results of two logical expressions.|%3Clogical_expression%3E%5BAND%5D%3Clogical_expression%3E;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100157]:BODY|N|The BODY function selects the part of the template file or include file that is being exported. Only one BODY function can be applied per file. If the file contains no BODY function, the entire file is exported.|... %5B%5BBODY%5D%5D ... %5B%5BENDBODY%5D%5D ... ;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100147]:CHILD|Y|Check that the current model element for the concerned tag has a child model element with the specified tag (or all for *) that meets (optionally) the specified logical expression. |CHILD(%3Ctag%3E)%0ACHILD(*)%0ACHILD(%3Ctag%3E:%3Clogical_expression%3E)%0A%3Ctag%3E.CHILD(~~~)%0A%3Ctag%3E(%3Clocation%3E).CHILD(~~~);
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100102]:DECL|N|Perform the Perl eval expression once to decclare in functions or variables. To prefix the names with %22my%22, they will not mixed up to the CubeGen code.|%5B%5BDECL:%3Cperl_expression%3E%5D%5D;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100100]:EVAL|N|Export the result of a Perl exprssion. When the Perl expression is placed between parentheses, the result is not exported. To prefix the names with %22my%22, they will not mixed up to the CubeGen code.%0AThe %3Cperl_expression%3E can contain labels that will be replaced by model element property values.|%5B%5BEVAL:%3Cperl_expression%3E%5D%5D%0A%5B%5BEVAL:(%3Cperl_expression%3E)%5D%5D;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100101]:EVAL|Y|Perform a logical Perl expression.%0AThe %3Cperl logicsal expression%3E can contain labels that will be replaced by a model element property value.|EVAL:%3Cperl_logical_expression%3E;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100156]:FILE|N|The FILE function switches over to another code file during the generation process. The %3Cfile_name%3E can also contain a path reference and labels that will be replaced by a model element property value or parameter value.|%5B%5BFILE,%3Cfile_name%3E%5D%5D;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100140]:FIRST|Y|Check that it is the first selected model element in the LOOP for the concerned tag. |FIRST%0A%3Ctag%3E.FIRST%0A%3Ctag%3E(%3Clocation%3E).FIRST;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100060]:FOR|N|Equal to FORV.|;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100040]:FORH|N|In the hierarchy selected by LOOP functions, the FORH function navigates on the same level (horizontal) through the model elements of the specified or actual type. The template segments for the selected model elements will be exported in the order of the loop specification, possibly separated by a specified string|%5B%5BFORH:%3Cloopspec%3E%5D%5D ... %5B%5BENDFOR%5D%5D%0A%5B%5BFORH,%3Ctag%3E:%3Cloopspec%3E%5D%5D ... %5B%5BENDFOR%5D%5D%0A%5B%5BFORH:%3Cloopspec%3E:%3Cseperator%3E%5D%5D ... %5B%5BENDFOR%5D%5D%0A%5B%5BFORH,%3Ctag%3E:%3Cloopspec%3E:%3Cseperator%3E%5D%5D ... %5B%5BENDFOR%5D%5D;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100041]:FORV|N|In the hierarchy selected by LOOP functions, the FORV function navigates top down (vertical) through the model elements of the specified or actual type. The template segments for the selected model elements will be exported in the order of the loop specification, possibly separated by a specified string.%0A|%5B%5BFORV:%3Cloopspec%3E%5D%5D ... %5B%5BENDFOR%5D%5D%0A%5B%5BFORV,%3Ctag%3E:%3Cloopspec%3E%5D%5D ... %5B%5BENDFOR%5D%5D%0A%5B%5BFORV:%3Cloopspec%3E:%3Cseperator%3E%5D%5D ... %5B%5BENDFOR%5D%5D%0A%5B%5BFORV,%3Ctag%3E:%3Cloopspec%3E:%3Cseperator%3E%5D%5D ... %5B%5BENDFOR%5D%5D;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100149]:ID|Y|Check for the id of the actual model element.%0AThe %3Cvalue%3E can contain labels that will be replaced by a model element property value.|ID(%3Cvalue%3E)%0A%3Ctag%3E.ID(%3Cvalue%3E)%0A%3Ctag%3E(%3Clocation%3E).ID(%3Cvalue%3E);
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100000]:IF|N|Export a template segment that applies to a condition (logical_expression). By default, the logical functions in the logical expression work on the model elements that are selected within the valid loop. If a tag for the colon is filled, the model elements of this tag are used by default. This tag can be overruled by a tag that can be defined for the logical function.|%5B%5BIF:%3C(logical_expression%3E%5D%5D ... %5B%5BENDIF%5D%5D%0A%5B%5BIF,%3Ctag%3E:%3C(logical_expression%3E%5D%5D ... %5B%5BENDIF%5D%5D%0A%5B%5BIF,%3Ctag%3E(%3Clocation%3E):%3C(logical_expression%3E%5D%5D ... %5B%5BENDIF%5D%5D%0A%5B%5BIF~~~%5D%5D ... %5B%5BELSIF~~~%5D%5D ... %5B%5BELSE%5D%5D ... %5B%5BENDIF%5D%5D;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100155]:INCLUDE|N|Template segments can be included from another file. The filename can also contain a path reference.|%5B%5BINCLUDE,%3C%3Cfile_name%3E%3E%5D%5D;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100144]:LAST|Y|Check that it is the last selected model element in the LOOP for the concerned tag. |LAST%0A%3Ctag%3E.LAST%0A%3Ctag%3E(%3Clocation%3E).LAST;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100146]:LEVEL|Y|Check that the model element is of the specified level in the hierachy of the REPEAT LOOP for the concerned tag. So LEVEL(1) checks for the root model element.|LEVEL(%3Crepeat_level%3E)%0A%3Ctag%3E.LEVEL(%3Crepeat_level%3E)%0A%3Ctag%3E(%3Clocation%3E).LEVEL(%3Crepeat_level%3E);
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100001]:LOOP|N|Export the template segment for the model elements that (optionally) meet the logical expression for the specified tag in sequential order .|%5B%5BLOOP,%3Ctag%3E%5D%5D ... %5B%5BENDLOOP,%3Ctag%3E%5D%5D%0A%5B%5BLOOP,%3Ctag%3E:%3C(logical_expression%3E%5D%5D ... %5B%5BENDLOOP,%3Ctag%3E%5D%5D;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100150]:NOT|Y|Invert the result of a logical expression.|!%3Clogical_expression%3E;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100152]:OR|Y|Perform the logical OR function on the results of two logical expressions.|%3Clogical_expression%3E%5BOR%5D%3Clogical_expression%3E;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100148]:PARENT|Y|Check that the current model element for the concerned tag has a parent model element with the specified tag that meets (optionally) the specified logical expression. |PARENT(%3Ctag%3E)%0APARENT(%3Ctag%3E:%3Clogical_expression%3E)%0A%3Ctag%3E.PARENT(~~~)%0A%3Ctag%3E(%3Clocation%3E).PARENT(~~~);
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100002]:REPEAT|N|Repeat the LOOP function for all underlying model elements of the specified type.|%5B%5BLOOP,%3Ctag%3E%5D%5D ... %5B%5BREPEAT%5D%5D ... %5B%5BENDLOOP,%3Ctag%3E%5D%5D%0A%5B%5BLOOP,%3Ctag%3E%5D%5D ... %5B%5BREPEAT:TAB%5D%5D ... %5B%5BENDLOOP,%3Ctag%3E%5D%5D%0A%5B%5BLOOP,%3Ctag%3E%5D%5D ... %5B%5BLOOP...%5D%5D ... %5B%5BREPEAT,%3Ctag%3E%5D%5D ... %5B%5BENDLOOP...%5D%5D ... %5B%5BENDLOOP,%3Ctag%3E%5D%5D%0A%5B%5BLOOP,%3Ctag%3E%5D%5D ... %5B%5BLOOP...%5D%5D ... %5B%5BREPEAT,%3Ctag%3E:TAB%5D%5D ... %5B%5BENDLOOP...%5D%5D ... %5B%5BENDLOOP,%3Ctag%3E%5D%5D;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100145]:ROOT|Y|Check that the model element is the root of the hierachy of the REPEAT LOOP for the concerned tag. |ROOT%0A%3Ctag%3E.ROOT%0A%3Ctag%3E(%3Clocation%3E).ROOT;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100108]:SEQUENCE|N|The model elements referenced by the LOOP functions nested in the SEQUENCE function are exported in the order as they appear in the Cube model. The text within the SEQUENCE function and outside the nested LOOP function is ignored, and will not be exported. |%5B%5BSEQUENCE%5D%5D%0A%5B%5BLOOP,%3Ctag1%3E%5D%5D ... %5B%5BENDLOOP,%3Ctag1%3E%5D%5D%0A%5B%5BLOOP,%3Ctag2%3E%5D%5D ... %5B%5BENDLOOP,%3Ctag2%3E%5D%5D%0A...%0A%5B%5BLOOP,%3CtagN%3E%5D%5D ... %5B%5BENDLOOP,%3CtagN%3E%5D%5D%0A%5B%5BENDSEQUENCE%5D%5D;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100020]:TAG|Y|Check for the type of the actual model element.|TAG(%3Ctag%3E);
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100123]:TEMPLATE|N|Process a model element property as a template segment.|%5B%5BTEMPLATE:%3Ctag%3E%5D%5D%0A%5B%5BTEMPLATE:%3Ctag%3E(%3Clocation%3E)%5D%5D%0A%5B%5BTEMPLATE:%3Ctag%3E(%3Clocation%3E)%3Cproperty%3E%5D%5D%0A%5B%5BTEMPLATE:%3Ctag%3E:%3Cfunction%3E%5D%5D%0A%5B%5BTEMPLATE:%3Ctag%3E(%3Clocation%3E):%3Cfunction%3E%5D%5D%0A%5B%5BTEMPLATE:%3Ctag%3E(%3Clocation%3E)%3Cproperty%3E:%3Cfunction%3E%5D%5D;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100154]:TEXT|N|Text blocks are defined for reuse of template segments. The text may contain labels that are replaced with arguments that are defined at the place where the text is applied. The optional list of arguments starts and ends with the separator %22%5B%7C%5D%22. The text is only exported at the location of the text labels. The text blocks themselves are not exported.|%5B%5BTEXT,%3Cname%3E%5D%5D ... %5B%5BENDTEXT%5D%5D%0A%3C%3CTEXT,%3Cname%3E%3E%3E%0A%0A%5B%5BTEXT,%3Cname%3E%5D%5D ... %3C%3CT1%3E%3E ... %3C%3CT2%3E%3E ... %5B%5BENDTEXT%5D%5D%0A%3C%3CTEXT,%3Cname%3E%5B%7C%5D%3Cparm1%3E%5B%7C%5D%3Cparm2%3E%5B%7C%5D%3E%3E;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100003]:VALUE|N|Export the properties of a model element.|%5B%5BVALUE,%3Ctag%3E:%3Cloop_spec%3E:%3Cseparator%3E%5D%5D;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100106]:comment|N|Text that is not exported.|%5B%5B* ... *%5D%5D;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100142]:parameter=|Y|The parameters specified on the command line can be referenced in the %22is equal to%22 logical expression.%0AThe %3Cvalue%3E can contain labels that will be replaced by a model element property value or parameter value.|P%3Cparm_number%3E=%3Cvalue%3E;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100120]:parameters|N|The parameters specified on the command line can be selected for export. Only the replace functions L (lowercase) and U (uppercase) are supported.|%3C%3C%3Cparm_number%3E%3E%3E%0A%3C%3C%3Cparm_number%3E:%3Cfunction%3E%3E%3E;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100153]:parentheses|Y|Parentheses are used in the logical expressions to define the precedence of the AND,OR and NOT operations.|!(%3Clogical_expression%3E%5BAND%5D(%3Clogical_expression%3E%5BOR%5D%3Clogical_expression%3E));
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100143]:property=|Y|A model element property can be referenced in the %22is equal to%22 logical expression.%0AThe %3Cvalue%3E can contain labels that will be replaced by a model element property value or parameter value.|%3Cproperty_number%3E=%3Cvalue%3E%0A%3Ctag%3E.%3Cproperty_number%3E=%3Cvalue%3E%0A%3Ctag%3E(%3Clocation%3E).%3Cproperty_number%3E=%3Cvalue%3E;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
	+CUBE_GEN_TEMPLATE_FUNCTION[CTF-000000100107]:replacement|N|Replace a label with a model value.|%3C%3C%3Ctag%3E%3E%3E%0A%3C%3C%3Ctag%3E(%3Clocation%3E)%3E%3E%0A%3C%3C%3Ctag%3E%3Cproperty%3E%3E%3E%0A%3C%3C%3Ctag%3E(%3Clocation%3E)%3Cproperty%3E%3E%3E%0A%3C%3C%3Ctag%3E:%3Cfunction%3E%3E%3E%0A%3C%3C%3Ctag%3E(%3Clocation%3E):%3Cfunction%3E%3E%3E%0A%3C%3C%3Ctag%3E%3Cproperty%3E:%3Cfunction%3E%3E%3E%0A%3C%3C%3Ctag%3E(%3Clocation%3E)%3Cproperty%3E:%3Cfunction%3E%3E%3E%0A;
	-CUBE_GEN_TEMPLATE_FUNCTION:;
-CUBE_GEN_DOCUMENTATION:;