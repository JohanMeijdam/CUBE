* Change log:
05-07-2017 - Separate implementation model:
-	intial version
17-10-2017 - service type select based on arguments, more generic. (maybe also possible for other operation types) 
20-11-2017 - encapsulated in stead of ref (restricted)
24-11-2017 - meta model added.
26-11-2017 - list_recursive added.
26-02-2018 - Recursive count fixed.
27-02-2018 - select check_no_parent fixed (only foreign keys has as source a primary key)
28-02-2018 - TYPE CODE not from BUSINESS_OBJECT_TYPE but from TYPE.
02-03-2018 - Scoping in hierarchy selection (SCOPE_LEVEL) implemented.
30-05-2018 - Create with position always define l_cube_sequence.
01-05-2019 - NVL in validation of POS_ACTION
21-12-2019 - List encapsulated argument fix.
05-02-2020 - Reference scope type ENCAPSULATED removed.
15-12-2021 - No pkg prefix
18-12-2021 - ORA independent
09-01-2022 - Package cube and Package owner
19-01-2022 - Argument import export and ref_cursor generic;
06-02-2022 - Service FlagNoSelect inverted to FlagCursor
13-02-2022 - p_cube_row always as first argument
16-02-2022 - FlagCursor to FlagCursorExport.
06-04-2002 - Exception with code
14-06-2022 - FlagCursorExport in USE statement
18-06-2022 - COALESCE in stead of NVL due to PG ORA compatibility
19-06-2022 - VALUEIF (CASE) in staed of DECODE due to PG ORA compatibility
20-06-2022 - EXPRESSION CONDITION DATABASE
21-07-2022 - ABORT in stead of RAISE_APPLICATION_ERROR due to PG ORA compatibility
08-08-2023 - ARGUMENT > SERVICE_ARGUMENT
[[INCLUDE,Includes/general.cgt]]
[[TEXT,IMPL_SQL_NOT_FOUND]][[*No arguments*]]
		+STATEMENT:SELECTION|IF;
			+STATEMENT_GROUP:;
				+EXPRESSION:CONDITION|DATABASE;
					=CODE:NOTFOUND;
				-EXPRESSION:;
				+STATEMENT:ABORT;
					=EXPRESSION:STRING|Type <<OPERATION_TYPE:L>> not found;
				-STATEMENT:;
			-STATEMENT_GROUP:;
		-STATEMENT:;[[ENDTEXT]]
[[TEXT,IMPL_VAL_POS_ACTION]][[*No arguments*]]
		=STATEMENT:NOTE|A=After B=Before F=First L=Last;
		+STATEMENT:SELECTION|IF;
			+STATEMENT_GROUP:;
				+EXPRESSION:CONDITION|NOT IN;
					+EXPRESSION:FUNCTION|COALESCE;
						=EXPRESSION:REF_NAME|p_cube_pos_action;
						=EXPRESSION:STRING| ;
					-EXPRESSION:;
					+EXPRESSION:LIST;
						=EXPRESSION:STRING|A;
						=EXPRESSION:STRING|B;
						=EXPRESSION:STRING|F;
						=EXPRESSION:STRING|L;
					-EXPRESSION:;
				-EXPRESSION:;
				+STATEMENT:ABORT;
					=EXPRESSION:STRING|Invalid position action: %;
					=EXPRESSION:REF_NAME|p_cube_pos_action;
				-STATEMENT:;
			-STATEMENT_GROUP:;
		-STATEMENT:;[[ENDTEXT]]
[[TEXT,IMPL_USE_DETERM_POS]][[*1:Prefix*]]
		+STATEMENT:USE|determine_position_<<OPERATION_TYPE1:L>>|N;
			+EXPRESSION:LIST;
				=EXPRESSION:REF_NAME|l_cube_sequence;
				=EXPRESSION:REF_NAME|p_cube_pos_action;[[LOOP,ATTRIBUTE:1=Y[OR]<<TEXT,GEN_IS_FKEY_F>>[OR]3=R]]
				=EXPRESSION:REF_NAME|[[IF:1=Y]]x_[[ELSE]]<<T1>>_[[ENDIF]]<<ATTRIBUTE:L>>;[[ENDLOOP,ATTRIBUTE]]
			-EXPRESSION:;
		-STATEMENT:;[[ENDTEXT]]
[[TEXT,IMPL_SELECT_SIBLINGS]][[IF:!ROOT]][[LOOP,ATTRIBUTE:<<TEXT,GEN_IS_FKEY_F>>]]
						+EXPRESSION:CONDITION|=;
							=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
							=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;
						-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]][[ENDIF]][[IF:3=Y]]
						+EXPRESSION:LOGICAL|OR;[[LOOP,ATTRIBUTE:3=R]]
							+EXPRESSION:LOGICAL|AND;
								+EXPRESSION:CONDITION|UNDEFINED;
									=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
								-EXPRESSION:;
								+EXPRESSION:CONDITION|UNDEFINED;
									=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;
								-EXPRESSION:;
							-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]][[LOOP,ATTRIBUTE:3=R]]
							+EXPRESSION:LOGICAL|AND;
								+EXPRESSION:CONDITION|=;
									=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
									=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;
								-EXPRESSION:;
							-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
						-EXPRESSION:;[[ENDIF]][[ENDTEXT]]
[[TEXT,IMPL_SELECT_SCOPE_FOREIGN_KEY]][[LOOP,TYPE_LIST_SCOPE_ATTRIBUTE:CHILD(TYPE_LIST_SCOPE_ATTRIBUTE_SOURCE:3=F)]]
								+EXPRESSION:CONDITION|=;
									=EXPRESSION:REF_NAME|[[LOOP,TYPE_LIST_SCOPE_ATTRIBUTE_SOURCE]]<<TYPE_LIST_SCOPE_ATTRIBUTE_SOURCE:L>>[[ENDLOOP,TYPE_LIST_SCOPE_ATTRIBUTE_SOURCE]];
									=EXPRESSION:REF_NAME|x_[[LOOP,ATTRIBUTE]]<<ATTRIBUTE:L>>[[ENDLOOP,ATTRIBUTE]];
								-EXPRESSION:;[[ENDLOOP,TYPE_LIST_SCOPE_ATTRIBUTE]][[ENDTEXT]]
[[TEXT,IMPL_SELECT_SCOPE_ATTRIBUTES]][[IF,SERVICE:CHILD(SERVICE_TYPE_LIST:CHILD(TYPE_LIST_SCOPE_ATTRIBUTE))]][[FOR,SERVICE:N>N]][[LOOP,SERVICE_TYPE_LIST]][[LOOP,TYPE_LIST_SCOPE_ATTRIBUTE]]
					+EXPRESSION:CONDITION|=;
						=EXPRESSION:REF_NAME|[[LOOP,ATTRIBUTE]]<<ATTRIBUTE:L>>[[ENDLOOP,ATTRIBUTE]];[[IF:SERVICE_TYPE_LIST.CHILD(TYPE_LIST_SCOPE:3=Y)[AND]CHILD(TYPE_LIST_SCOPE_ATTRIBUTE_SOURCE:!3=F)]]
						=EXPRESSION:REF_NAME|l_[[LOOP,TYPE_LIST_SCOPE_ATTRIBUTE_SOURCE]]<<TYPE_LIST_SCOPE_ATTRIBUTE_SOURCE:L>>[[ENDLOOP,TYPE_LIST_SCOPE_ATTRIBUTE_SOURCE]];[[ELSE]]
						=EXPRESSION:REF_NAME|x_[[LOOP,ATTRIBUTE]]<<ATTRIBUTE:L>>[[ENDLOOP,ATTRIBUTE]];[[ENDIF]]
					-EXPRESSION:;[[ENDLOOP,TYPE_LIST_SCOPE_ATTRIBUTE]][[ENDLOOP,SERVICE_TYPE_LIST]][[ENDFOR]][[ENDIF]][[ENDTEXT]]							
[[BODY]]! Cube Server Implementation Model (PL/SQL)
+META_MODEL:CUBE;
	+META_TYPE:PACKAGE|;
		=PROPERTY:0|Name|;
		+META_TYPE:TYPE|;
			=PROPERTY:0|Name|;
			=PROPERTY:1|Owner|;
		-META_TYPE:;
		+META_TYPE:PROCEDURE|;
			=PROPERTY:0|Name|;
			=PROPERTY:1|FlagPublic|;
			=PROPERTY:2|FlagCursorExport|;
			+META_TYPE:ARGUMENT|;
				=PROPERTY:0|Name|;
				=PROPERTY:1|CodeImportExport|;
				=PROPERTY:2|Domain|;
			-META_TYPE:;
			+META_TYPE:VARIABLE|;
				=PROPERTY:0|Name|;
				=PROPERTY:1|-|;
				=PROPERTY:2|Domain|;
				=PROPERTY:2|Length|;
				=PROPERTY:2|Decimals|;
			-META_TYPE:;
			+META_TYPE:CURSOR|;
				=PROPERTY:0|Name|;
			-META_TYPE:;
			+META_TYPE:STATEMENT|;
				=PROPERTY:0|Type|;
				=PROPERTY:1|FlagCursorExport|Type=USE;
				+META_TYPE_SPEC:READ_EXPORT|;
					+META_TYPE:READ_TABLE|;
						=PROPERTY:0|TableName|;
						=PROPERTY:1|Alias|;
					-META_TYPE:;
					+META_TYPE:READ_TABLE_RECURSIVE|;
						=PROPERTY:0|TableName|;
						=PROPERTY:1|AliasAnchor|;
						=PROPERTY:2|AliasRecursive|;
						+META_TYPE:READ_RECURSIVE_ATTRIBUTE|;
							=PROPERTY:0|Name|;
						-META_TYPE:;
						+META_TYPE:READ_RECURSIVE_REFERENCE|;
							+META_TYPE:READ_RECURSIVE_FKEY|;
								=PROPERTY:0|Name|;
								=PROPERTY:1|SourceName|;
							-META_TYPE:;
						-META_TYPE:;
					-META_TYPE:;
				-META_TYPE_SPEC:;
				+META_TYPE_SPEC:ITERATION|;
				-META_TYPE_SPEC:;
			-META_TYPE:;
			+META_TYPE:EXCEPTION|;
				=PROPERTY:0|Code|Values: E001(Unique Constraint);
				+META_TYPE:STATEMENT|;
				-META_TYPE:;
			-META_TYPE:;
		-META_TYPE:;
	-META_TYPE:;
-META_MODEL:CUBE;[[LOOP,SYSTEM:0=<<1>>]][[IF:!0=CubeSys]]
=PACKAGE:cube|<<SYSTEM3>>;[[ENDIF]][[LOOP,SYSTEM_BO_TYPE]][[LOOP,BUSINESS_OBJECT_TYPE]]
+PACKAGE:[[LOOP,TYPE]]<<TYPE1:L>>|<<SYSTEM3>>[[ENDLOOP,TYPE]];[[LOOP,SERVICE]][[LOOP,OPERATION]]
	+PROCEDURE:<<OPERATION:L>>|[[IF:SERVICE.3=E]]Y[[ELSE]]N[[ENDIF]]|[[IF:SERVICE.2=Y[OR]CHILD(EXPORT)]]Y[[ENDIF]];[[FOR,SERVICE:N>N]][[LOOP,SERVICE_ARGUMENT]]
		=ARGUMENT:<<SERVICE_ARGUMENT:L>>[[LOOP,ARGUMENT_ATTRIBUTE]]<<ARGUMENT_ATTRIBUTE:L>>|<<SERVICE_ARGUMENT1>>|[[LOOP,INFORMATION_TYPE_ELEMENT]]<<INFORMATION_TYPE_ELEMENT2>>[[ENDLOOP,INFORMATION_TYPE_ELEMENT]][[ENDLOOP,ARGUMENT_ATTRIBUTE]];[[ENDLOOP,SERVICE_ARGUMENT]][[ENDFOR]][[LOOP,OPERATION_TYPE]][[*
*]][[IF,SERVICE:1=list]][[FOR,SERVICE:N>N]][[LOOP,SERVICE_TYPE_LIST]][[IF:CHILD(TYPE_LIST_SCOPE:3=Y)]]
		+VARIABLE:l_cube_scope_level||NUMBER|1|0;
			=EXPRESSION:NUMBER|0;
		-VARIABLE:;[[LOOP,TYPE_LIST_SCOPE_ATTRIBUTE]][[LOOP,TYPE_LIST_SCOPE_ATTRIBUTE_SOURCE:!3=F]]
		=VARIABLE:l_<<TYPE_LIST_SCOPE_ATTRIBUTE_SOURCE:L>>||v_[[FOR,SERVICE_TYPE_LIST:N>N]][[LOOP,TYPE_LIST_SCOPE]]<<TYPE_LIST_SCOPE:L>>[[ENDLOOP,TYPE_LIST_SCOPE]][[ENDFOR]].<<TYPE_LIST_SCOPE_ATTRIBUTE_SOURCE:L>>||;
		+STATEMENT:SET|l_<<TYPE_LIST_SCOPE_ATTRIBUTE_SOURCE:L>>;
			=EXPRESSION:REF_NAME|x_[[FOR,TYPE_LIST_SCOPE_ATTRIBUTE:N>N]][[LOOP,ATTRIBUTE]]<<ATTRIBUTE:L>>[[ENDLOOP,ATTRIBUTE]][[ENDFOR]];
		-STATEMENT:;[[ENDLOOP,TYPE_LIST_SCOPE_ATTRIBUTE_SOURCE]][[ENDLOOP,TYPE_LIST_SCOPE_ATTRIBUTE]]
		+STATEMENT:SELECTION|IF;
			+STATEMENT_GROUP:;
				+EXPRESSION:CONDITION|>;
					=EXPRESSION:REF_NAME|p_cube_scope_level;
					=EXPRESSION:NUMBER|0;
				-EXPRESSION:;
				+STATEMENT:ITERATION|forever;
					+STATEMENT:SELECTION|IF;
						+STATEMENT_GROUP:;
							+EXPRESSION:CONDITION|=;
								=EXPRESSION:REF_NAME|p_cube_scope_level;
								=EXPRESSION:REF_NAME|l_cube_scope_level;
							-EXPRESSION:;
							=STATEMENT:STOP_ITERATION;
						-STATEMENT_GROUP:;
					-STATEMENT:;
					+STATEMENT:SET|l_cube_scope_level;
						+EXPRESSION:CALCULATION;
							+EXPRESSION:CALCULATION_ITEM|+;
								=EXPRESSION:REF_NAME|l_cube_scope_level;
							-EXPRESSION:;
							+EXPRESSION:CALCULATION_ITEM|+;
								=EXPRESSION:NUMBER|1;
							-EXPRESSION:;
						-EXPRESSION:;
					-STATEMENT:;				
					+STATEMENT:READ|SINGLE;[[LOOP,TYPE_LIST_SCOPE]]
						=READ_TABLE:v_<<TYPE_LIST_SCOPE:L>>|#;[[LOOP,ATTRIBUTE:3=R]]
						+GET:l_[[LOOP,ATTRIBUTE_SOURCE]]<<ATTRIBUTE_SOURCE:L>>[[ENDLOOP,ATTRIBUTE_SOURCE]];
							=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
						-GET:;[[ENDLOOP,ATTRIBUTE]]
						+SELECTION:;
							+EXPRESSION:LOGICAL|AND;[[LOOP,ATTRIBUTE:3=R]][[LOOP,ATTRIBUTE_SOURCE]]
								+EXPRESSION:CONDITION|=;
									=EXPRESSION:REF_NAME|<<ATTRIBUTE_SOURCE:L>>;
									=EXPRESSION:REF_NAME|l_<<ATTRIBUTE_SOURCE:L>>;
								-EXPRESSION:;[[ENDLOOP,ATTRIBUTE_SOURCE]][[ENDLOOP,ATTRIBUTE]][[ENDLOOP,TYPE_LIST_SCOPE]]<<TEXT,IMPL_SELECT_SCOPE_FOREIGN_KEY>>
							-EXPRESSION:;
						-SELECTION:;
					-STATEMENT:;
				-STATEMENT:;
			-STATEMENT_GROUP:;
			+STATEMENT_GROUP:;
				+EXPRESSION:CONDITION|<;
					=EXPRESSION:REF_NAME|p_cube_scope_level;
					=EXPRESSION:NUMBER|0;
				-EXPRESSION:;
				+STATEMENT:ITERATION|forever;
					+STATEMENT:SELECTION|IF;
						+STATEMENT_GROUP:;
							+EXPRESSION:CONDITION|=;
								=EXPRESSION:REF_NAME|p_cube_scope_level;
								=EXPRESSION:REF_NAME|l_cube_scope_level;
							-EXPRESSION:;
							=STATEMENT:STOP_ITERATION;
						-STATEMENT_GROUP:;
					-STATEMENT:;
					+STATEMENT:SET|l_cube_scope_level;
						+EXPRESSION:CALCULATION;
							+EXPRESSION:CALCULATION_ITEM|+;
								=EXPRESSION:REF_NAME|l_cube_scope_level;
							-EXPRESSION:;
							+EXPRESSION:CALCULATION_ITEM|-;
								=EXPRESSION:NUMBER|1;
							-EXPRESSION:;
						-EXPRESSION:;
					-STATEMENT:;				
					+STATEMENT:READ|SINGLE;[[LOOP,TYPE_LIST_SCOPE]]
						=READ_TABLE:v_<<TYPE_LIST_SCOPE:L>>|#;[[LOOP,ATTRIBUTE:3=R]][[LOOP,ATTRIBUTE_SOURCE]]
						+GET:l_<<ATTRIBUTE_SOURCE:L>>;
							=EXPRESSION:REF_NAME|<<ATTRIBUTE_SOURCE:L>>;
						-GET:;[[ENDLOOP,ATTRIBUTE_SOURCE]][[ENDLOOP,ATTRIBUTE]]
						+SELECTION:;
							+EXPRESSION:LOGICAL|AND;[[LOOP,ATTRIBUTE:3=R]]
								+EXPRESSION:CONDITION|=;
									=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
									=EXPRESSION:REF_NAME|l_[[LOOP,ATTRIBUTE_SOURCE]]<<ATTRIBUTE_SOURCE:L>>[[ENDLOOP,ATTRIBUTE_SOURCE]];
								-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]][[ENDLOOP,TYPE_LIST_SCOPE]]<<TEXT,IMPL_SELECT_SCOPE_FOREIGN_KEY>>
							-EXPRESSION:;
						-SELECTION:;
					-STATEMENT:;
				-STATEMENT:;
			-STATEMENT_GROUP:;
		-STATEMENT:;[[ENDIF]][[ENDLOOP,SERVICE_TYPE_LIST]][[ENDFOR]]
		+STATEMENT:READ_EXPORT;[[IF,OPERATION:1=recursive]]
			+READ_TABLE_RECURSIVE:v_<<OPERATION_TYPE:L>>|anchor|recursive;[[IF:6=P]]
				=READ_RECURSIVE_ATTRIBUTE:cube_sequence;[[ENDIF]][[LOOP,ATTRIBUTE:1=Y[OR]!2=N]]
				=READ_RECURSIVE_ATTRIBUTE:<<ATTRIBUTE:L>>;[[ENDLOOP,ATTRIBUTE]]
				+READ_RECURSIVE_REFERENCE:;[[LOOP,ATTRIBUTE:3=F[AND]1=Y]]
					=READ_RECURSIVE_FKEY:<<ATTRIBUTE:L>>|<<ATTRIBUTE:L>>;[[ENDLOOP,ATTRIBUTE]][[LOOP,ATTRIBUTE:3=R]]
					=READ_RECURSIVE_FKEY:<<ATTRIBUTE:L>>|[[LOOP,ATTRIBUTE_SOURCE]]<<ATTRIBUTE_SOURCE:L>>[[ENDLOOP,ATTRIBUTE_SOURCE]];[[ENDLOOP,ATTRIBUTE]]
				-READ_RECURSIVE_REFERENCE:;[[LOOP,REFERENCE_RECURSIVE]]
				+READ_RECURSIVE_REFERENCE:;[[LOOP,FKEY]]
					=READ_RECURSIVE_FKEY:<<FKEY:L>>|[[LOOP,ATTRIBUTE_SOURCE]]<<ATTRIBUTE_SOURCE:L>>[[ENDLOOP,ATTRIBUTE_SOURCE]];[[ENDLOOP,FKEY]]
				-READ_RECURSIVE_REFERENCE:;[[ENDLOOP,REFERENCE_RECURSIVE]]
				+JOIN_SELECTION:;
					+EXPRESSION:LOGICAL|AND;
						+EXPRESSION:LOGICAL|OR;
							+EXPRESSION:LOGICAL|AND;
								+EXPRESSION:CONDITION|=;
									=EXPRESSION:REF_NAME|p_cube_up_or_down;
									=EXPRESSION:STRING|D;
								-EXPRESSION:;
								+EXPRESSION:LOGICAL|OR;
									+EXPRESSION:LOGICAL|AND;[[LOOP,ATTRIBUTE:3=F[AND]1=Y]]
										+EXPRESSION:CONDITION|=;
											=EXPRESSION:REF_NAME|anchor.<<ATTRIBUTE:L>>;
											=EXPRESSION:REF_NAME|recursive.<<ATTRIBUTE:L>>;
										-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]][[LOOP,ATTRIBUTE:3=R]]
										+EXPRESSION:CONDITION|=;
											=EXPRESSION:REF_NAME|anchor.[[LOOP,ATTRIBUTE_SOURCE]]<<ATTRIBUTE_SOURCE:L>>[[ENDLOOP,ATTRIBUTE_SOURCE]];
											=EXPRESSION:REF_NAME|recursive.<<ATTRIBUTE:L>>;
										-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
									-EXPRESSION:;[[LOOP,REFERENCE_RECURSIVE]]
									+EXPRESSION:LOGICAL|AND;[[LOOP,FKEY]]
										+EXPRESSION:CONDITION|=;
											=EXPRESSION:REF_NAME|anchor.[[LOOP,ATTRIBUTE_SOURCE]]<<ATTRIBUTE_SOURCE:L>>[[ENDLOOP,ATTRIBUTE_SOURCE]];
											=EXPRESSION:REF_NAME|recursive.<<FKEY:L>>;
										-EXPRESSION:;[[ENDLOOP,FKEY]]
									-EXPRESSION:;[[ENDLOOP,REFERENCE_RECURSIVE]]
								-EXPRESSION:;
							-EXPRESSION:;
							+EXPRESSION:LOGICAL|AND;
								+EXPRESSION:CONDITION|=;
									=EXPRESSION:REF_NAME|p_cube_up_or_down;
									=EXPRESSION:STRING|U;
								-EXPRESSION:;
								+EXPRESSION:LOGICAL|OR;
									+EXPRESSION:LOGICAL|AND;[[LOOP,ATTRIBUTE:3=F[AND]1=Y]]
										+EXPRESSION:CONDITION|=;
											=EXPRESSION:REF_NAME|anchor.<<ATTRIBUTE:L>>;
											=EXPRESSION:REF_NAME|recursive.<<ATTRIBUTE:L>>;
										-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]][[LOOP,ATTRIBUTE:3=R]]
										+EXPRESSION:CONDITION|=;
											=EXPRESSION:REF_NAME|anchor.<<ATTRIBUTE:L>>;
											=EXPRESSION:REF_NAME|recursive.[[LOOP,ATTRIBUTE_SOURCE]]<<ATTRIBUTE_SOURCE:L>>[[ENDLOOP,ATTRIBUTE_SOURCE]];
										-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
									-EXPRESSION:;[[LOOP,REFERENCE_RECURSIVE]]
									+EXPRESSION:LOGICAL|AND;[[LOOP,FKEY]]
										+EXPRESSION:CONDITION|=;
											=EXPRESSION:REF_NAME|anchor.<<FKEY:L>>;
											=EXPRESSION:REF_NAME|recursive.[[LOOP,ATTRIBUTE_SOURCE]]<<ATTRIBUTE_SOURCE:L>>[[ENDLOOP,ATTRIBUTE_SOURCE]];
										-EXPRESSION:;[[ENDLOOP,FKEY]]
									-EXPRESSION:;[[ENDLOOP,REFERENCE_RECURSIVE]]
								-EXPRESSION:;
							-EXPRESSION:;
						-EXPRESSION:;
						+EXPRESSION:CONDITION|<;
							=EXPRESSION:REF_NAME|anchor.cube_x_level;
							=EXPRESSION:REF_NAME|p_cube_x_level;
						-EXPRESSION:;
					-EXPRESSION:;
				-JOIN_SELECTION:;
			-READ_TABLE_RECURSIVE:;[[ELSE]]
			=READ_TABLE:v_<<OPERATION_TYPE:L>>|#;[[ENDIF]][[IF:6=P]]
			+GET:;
				=EXPRESSION:REF_NAME|cube_sequence;
			-GET:;[[ENDIF]][[LOOP,ATTRIBUTE:1=Y[OR]!2=N]]
			+GET:;
				=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
			-GET:;[[ENDLOOP,ATTRIBUTE]][[IF,OPERATION:!1=all[OR]SERVICE.CHILD(SERVICE_TYPE_LIST:CHILD(TYPE_LIST_SCOPE_ATTRIBUTE))]]
			+SELECTION:;[[IF,OPERATION:1=root]]
				+EXPRESSION:LOGICAL|AND;[[LOOP,ATTRIBUTE:3=R]]
					+EXPRESSION:CONDITION|UNDEFINED;
						=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
					-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
				-EXPRESSION:;[[ELSIF,OPERATION:1=part]]
				+EXPRESSION:LOGICAL|AND;[[LOOP,ATTRIBUTE:3=F[AND]CHILD(ATTRIBUTE_SOURCE:1=Y)]]
					+EXPRESSION:CONDITION|=;
						=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
						=EXPRESSION:REF_NAME|p_[[LOOP,ATTRIBUTE_SOURCE]]<<ATTRIBUTE_SOURCE:L>>[[ENDLOOP,ATTRIBUTE_SOURCE]];
					-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]][[LOOP,ATTRIBUTE:3=R]]
					+EXPRESSION:CONDITION|UNDEFINED;
						=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
					-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
				-EXPRESSION:;[[ELSIF,OPERATION:1=part_recursive]]
				+EXPRESSION:LOGICAL|AND;[[IF:2=Y]][[LOOP,ATTRIBUTE:3=F[AND]CHILD(ATTRIBUTE_SOURCE:1=Y)]]
					+EXPRESSION:CONDITION|=;
						=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
						=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;
					-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]][[ENDIF]][[LOOP,ATTRIBUTE:3=R]]
					+EXPRESSION:CONDITION|=;
						=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
						=EXPRESSION:REF_NAME|p_[[LOOP,ATTRIBUTE_SOURCE]]<<ATTRIBUTE_SOURCE:L>>[[ENDLOOP,ATTRIBUTE_SOURCE]];
					-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
				-EXPRESSION:;[[ELSIF,OPERATION:1=recursive]]
				+EXPRESSION:LOGICAL|AND;[[LOOP,ATTRIBUTE:1=Y]]
					+EXPRESSION:CONDITION|=;
						=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
						=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;
					-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
				-EXPRESSION:;[[ELSE]]
				+EXPRESSION:LOGICAL|AND;<<TEXT,IMPL_SELECT_SCOPE_ATTRIBUTES>>
				-EXPRESSION:;[[ENDIF]]
			-SELECTION:;[[ENDIF]]
			+SORT_ORDER:;[[IF:6=P]][[LOOP,ATTRIBUTE:1=Y[AND]3=F]]
				=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;[[ENDLOOP,ATTRIBUTE]]
				=EXPRESSION:REF_NAME|cube_sequence;[[ELSE]][[LOOP,ATTRIBUTE:1=Y[OR]!2=N]]
				=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;[[ENDLOOP,ATTRIBUTE]][[ENDIF]]
			-SORT_ORDER:;
		-STATEMENT:;[[*
*]][[ELSIF,SERVICE:1=count]]
		+STATEMENT:READ_EXPORT;
			=READ_TABLE:v_<<OPERATION_TYPE:L>>|#;
			+GET:type_count; 
				=EXPRESSION:COUNT;
			-GET:;[[IF,OPERATION:1=root]]
			+SELECTION:;
				+EXPRESSION:LOGICAL|AND;[[LOOP,ATTRIBUTE:3=R]]
					+EXPRESSION:CONDITION|UNDEFINED;
						=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
					-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
				-EXPRESSION:;
			-SELECTION:;[[ELSIF,OPERATION:1=part]]
			+SELECTION:;
				+EXPRESSION:LOGICAL|AND;[[LOOP,ATTRIBUTE:3=F[AND]CHILD(ATTRIBUTE_SOURCE:1=Y)]]
					+EXPRESSION:CONDITION|=;
						=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
						=EXPRESSION:REF_NAME|p_[[LOOP,ATTRIBUTE_SOURCE]]<<ATTRIBUTE_SOURCE:L>>[[ENDLOOP,ATTRIBUTE_SOURCE]];
					-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]][[LOOP,ATTRIBUTE:3=R]]
					+EXPRESSION:CONDITION|UNDEFINED;
						=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
					-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
				-EXPRESSION:;
			-SELECTION:;[[ELSIF,OPERATION:1=part_recursive]]
			+SELECTION:;
				+EXPRESSION:LOGICAL|AND;[[LOOP,ATTRIBUTE:3=F[AND]1=Y]]
					+EXPRESSION:CONDITION|=;
						=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
						=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;
					-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]][[LOOP,ATTRIBUTE:3=R]]
					+EXPRESSION:CONDITION|=;
						=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
						=EXPRESSION:REF_NAME|p_[[LOOP,ATTRIBUTE_SOURCE]]<<ATTRIBUTE_SOURCE:L>>[[ENDLOOP,ATTRIBUTE_SOURCE]];
					-EXPRESSION:;
					+EXPRESSION:CONDITION|DEFINED;
						=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
					-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
				-EXPRESSION:;
			-SELECTION:;[[ENDIF]]
		-STATEMENT:;[[*
*]][[ELSIF,SERVICE:1=select]]
		+STATEMENT:READ_EXPORT;
			=READ_TABLE:v_<<OPERATION_TYPE:L>>|#;[[FORV,OPERATION:N>N]][[LOOP,EXPORT]][[LOOP,ARGUMENT]]
			+GET:;
				=EXPRESSION:REF_NAME|<<ARGUMENT:L>>;
			-GET:;[[ENDLOOP,ARGUMENT]][[ENDLOOP,EXPORT]][[ENDFOR]]
			+SELECTION:;
				+EXPRESSION:LOGICAL|AND;[[FORV,SERVICE:N>N]][[LOOP,SERVICE_ARGUMENT]][[LOOP,ARGUMENT_ATTRIBUTE]]
					+EXPRESSION:CONDITION|=;
						=EXPRESSION:REF_NAME|<<ARGUMENT_ATTRIBUTE:L>>;
						=EXPRESSION:REF_NAME|<<SERVICE_ARGUMENT:L>><<ARGUMENT_ATTRIBUTE:L>>;
					-EXPRESSION:;[[ENDLOOP,ARGUMENT_ATTRIBUTE]][[ENDLOOP,SERVICE_ARGUMENT]][[ENDFOR]]
				-EXPRESSION:;
			-SELECTION:;
		-STATEMENT:;[[*
*]][[ELSIF,SERVICE:1=get_next]]
		+STATEMENT:READ_EXPORT;
			=READ_TABLE:v_<<OPERATION_TYPE:L>>|#;[[LOOP,ATTRIBUTE:1=Y]]
			+GET:;
				=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
			-GET:;[[ENDLOOP,ATTRIBUTE]]
			+SELECTION:;[[IF:3=Y]]
				+EXPRESSION:LOGICAL|AND;[[TABS:+1]];[[ENDIF]]
				+EXPRESSION:LOGICAL|OR;[[LOOP,ATTRIBUTE:1=Y]]
					+EXPRESSION:LOGICAL|AND;[[FORH:1>N-1]]
						+EXPRESSION:CONDITION|=;
							=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
							=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;
						-EXPRESSION:;[[ENDFOR]]
						+EXPRESSION:CONDITION|>;
							=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
							=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;
						-EXPRESSION:;
					-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
				-EXPRESSION:;[[IF:3=Y]][[TABS:-1]][[LOOP,ATTRIBUTE:3=R]]
					+EXPRESSION:LOGICAL|OR;
						+EXPRESSION:LOGICAL|AND;
							+EXPRESSION:CONDITION|UNDEFINED;
								=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
							-EXPRESSION:;
							+EXPRESSION:CONDITION|UNDEFINED;
								=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;
							-EXPRESSION:;
						-EXPRESSION:;
						+EXPRESSION:CONDITION|=;
							=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
							=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;
						-EXPRESSION:;
					-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
				-EXPRESSION:;[[ENDIF]]
			-SELECTION:;
			+SORT_ORDER:;[[LOOP,ATTRIBUTE:1=Y]]
				=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;[[ENDLOOP,ATTRIBUTE]]
			-SORT_ORDER:;
		-STATEMENT:;[[*
*]][[ELSIF,SERVICE:1=check_no_part]][[LOOP,ATTRIBUTE:<<TEXT,GEN_IS_OWN_KEY>>]]
		=VARIABLE:l_<<ATTRIBUTE:L>>||v_<<OPERATION_TYPE:L>>.<<ATTRIBUTE:L>>||;
		+STATEMENT:SET|l_<<ATTRIBUTE:L>>;
			=EXPRESSION:REF_NAME|x_<<ATTRIBUTE:L>>;
		-STATEMENT:;[[ENDLOOP,ATTRIBUTE]]
		+STATEMENT:ITERATION|forever;
			+STATEMENT:SELECTION|IF;
				+STATEMENT_GROUP:;
					+EXPRESSION:LOGICAL|AND;[[LOOP,ATTRIBUTE:<<TEXT,GEN_IS_OWN_KEY>>]]
						+EXPRESSION:CONDITION|UNDEFINED;
							=EXPRESSION:REF_NAME|l_<<ATTRIBUTE:L>>;
						-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
					-EXPRESSION:;
					+STATEMENT:STOP_ITERATION;
						=REMARK:OK;
					-STATEMENT:;
				-STATEMENT_GROUP:;
			-STATEMENT:;
			+STATEMENT:SELECTION|IF;
				+STATEMENT_GROUP:;
					+EXPRESSION:LOGICAL|AND;[[LOOP,ATTRIBUTE:<<TEXT,GEN_IS_OWN_KEY>>]]
						+EXPRESSION:CONDITION|=;
							=EXPRESSION:REF_NAME|l_<<ATTRIBUTE:L>>;
							=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;
						-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
					-EXPRESSION:;
					+STATEMENT:ABORT;
						=EXPRESSION:STRING|Target Type <<OPERATION_TYPE:L>> in hierarchy of moving object;
					-STATEMENT:;
				-STATEMENT_GROUP:;
			-STATEMENT:;
			+STATEMENT:READ|SINGLE;
				=READ_TABLE:v_<<OPERATION_TYPE:L>>|#;[[LOOP,ATTRIBUTE:3=R]]
				+GET:l_[[LOOP,ATTRIBUTE_SOURCE]]<<ATTRIBUTE_SOURCE:L>>[[ENDLOOP,ATTRIBUTE_SOURCE]];
					=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
				-GET:;[[ENDLOOP,ATTRIBUTE]]
				+SELECTION:;
					+EXPRESSION:LOGICAL|AND;[[IF:2=Y]][[LOOP,ATTRIBUTE:3=F[AND]CHILD(ATTRIBUTE_SOURCE:1=Y)]]
						+EXPRESSION:CONDITION|=;
							=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
							=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;
						-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]][[ENDIF]][[LOOP,ATTRIBUTE:<<TEXT,GEN_IS_OWN_KEY>>]]
						+EXPRESSION:CONDITION|=;
							=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
							=EXPRESSION:REF_NAME|l_<<ATTRIBUTE:L>>;
						-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
					-EXPRESSION:;
				-SELECTION:;
			-STATEMENT:;
		-STATEMENT:;[[*
*]][[ELSIF,SERVICE:1=move]]
		=VARIABLE:l_cube_sequence||NUMBER|8|0;[[LOOP,ATTRIBUTE:<<TEXT,GEN_IS_FKEY_NOT_IN_PK>>]]
		=VARIABLE:l_<<ATTRIBUTE:L>>||v_<<OPERATION_TYPE:L>>.<<ATTRIBUTE:L>>||;[[ENDLOOP,ATTRIBUTE]]<<TEXT,IMPL_VAL_POS_ACTION>>[[IF:CHILD(ATTRIBUTE:<<TEXT,GEN_IS_FKEY_NOT_IN_PK>>)]]
		=STATEMENT:NOTE|Get parent id of the target.;
		+STATEMENT:SELECTION|IF;
			+STATEMENT_GROUP:;
				+EXPRESSION:CONDITION|IN;
					=EXPRESSION:REF_NAME|p_cube_pos_action;
					+EXPRESSION:LIST;
						=EXPRESSION:STRING|B;
						=EXPRESSION:STRING|A;
					-EXPRESSION:;
				-EXPRESSION:;
				+STATEMENT:READ|SINGLE;
					=READ_TABLE:v_<<OPERATION_TYPE:L>>|#;[[LOOP,ATTRIBUTE:<<TEXT,GEN_IS_FKEY_NOT_IN_PK>>]]
					+GET:l_<<ATTRIBUTE:L>>;
						=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
					-GET:;[[ENDLOOP,ATTRIBUTE]]
					+SELECTION:;
						+EXPRESSION:LOGICAL|AND;[[LOOP,ATTRIBUTE:1=Y]]
							+EXPRESSION:CONDITION|=;
								=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
								=EXPRESSION:REF_NAME|x_<<ATTRIBUTE:L>>;
							-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
						-EXPRESSION:;
					-SELECTION:;
				-STATEMENT:;
			-STATEMENT_GROUP:;
			+STATEMENT_GROUP:;[[IF:CHILD(ATTRIBUTE:1=N[AND]<<TEXT,GEN_IS_FKEY_F>>)]]
				+STATEMENT:READ|SINGLE;
					=READ_TABLE:v_<<OPERATION_TYPE:L>>|#;[[LOOP,ATTRIBUTE:<<TEXT,GEN_IS_FKEY_F>>]]
					+GET:l_<<ATTRIBUTE:L>>;
						=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
					-GET:;[[ENDLOOP,ATTRIBUTE]]
					+SELECTION:;
						+EXPRESSION:LOGICAL|AND;[[LOOP,ATTRIBUTE:1=Y]]
							+EXPRESSION:CONDITION|=;
								=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
								=EXPRESSION:REF_NAME|x_<<ATTRIBUTE:L>>;
							-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
						-EXPRESSION:;
					-SELECTION:;
				-STATEMENT:;[[ENDIF]][[LOOP,ATTRIBUTE:3=R]]
				+STATEMENT:SET|l_<<ATTRIBUTE:L>>;
					=EXPRESSION:REF_NAME|[[LOOP,ATTRIBUTE_SOURCE]]x_<<ATTRIBUTE_SOURCE:L>>[[ENDLOOP,ATTRIBUTE_SOURCE]];
				-STATEMENT:;[[ENDLOOP,ATTRIBUTE]]
			-STATEMENT_GROUP:;
		-STATEMENT:;[[ENDIF]][[IF:CHILD(ATTRIBUTE:3=R)]]
		+STATEMENT:USE|check_no_part_<<OPERATION_TYPE1:L>>|N;
			+EXPRESSION:LIST;[[LOOP,ATTRIBUTE:1=Y]]
				=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;[[ENDLOOP,ATTRIBUTE]][[LOOP,ATTRIBUTE:3=R]]
				=EXPRESSION:REF_NAME|l_<<ATTRIBUTE:L>>;[[ENDLOOP,ATTRIBUTE]]
			-EXPRESSION:;
		-STATEMENT:;[[ENDIF]]<<TEXT,IMPL_USE_DETERM_POS[|]l[|]>>
		+STATEMENT:UPDATE|v_<<OPERATION_TYPE:L>>;[[LOOP,ATTRIBUTE:<<TEXT,GEN_IS_FKEY_NOT_IN_PK>>]]
			+SET:<<ATTRIBUTE:L>>;
				=EXPRESSION:REF_NAME|l_<<ATTRIBUTE:L>>;
			-SET:;[[ENDLOOP,ATTRIBUTE]]
			+SET:cube_sequence;
				=EXPRESSION:REF_NAME|l_cube_sequence;
			-SET:;
			+SELECTION:;
				+EXPRESSION:LOGICAL|AND;[[LOOP,ATTRIBUTE:1=Y]]
					+EXPRESSION:CONDITION|=;
						=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
						=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;
					-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
				-EXPRESSION:;
			-SELECTION:;
		-STATEMENT:;<<TEXT,IMPL_SQL_NOT_FOUND>>[[*
*]][[ELSIF,SERVICE:1=determine_position]]
		=VARIABLE:l_cube_pos_action||TEXT|1|;
		=VARIABLE:l_cube_position_sequ||NUMBER|8|0;
		=VARIABLE:l_cube_near_sequ||NUMBER|8|0;
		+VARIABLE:l_cube_count||NUMBER|8|0;
			=EXPRESSION:NUMBER|1024;
		-VARIABLE:;
		=CURSOR:r_<<OPERATION_TYPE1:L>>;
		=STATEMENT:NOTE|A=After B=Before F=First L=Last;
		+STATEMENT:SELECTION|CASE;
			=EXPRESSION:REF_NAME|p_cube_pos_action;
			+STATEMENT_GROUP:;
				=EXPRESSION:STRING|F;
				+STATEMENT:SET|l_cube_position_sequ;
					=EXPRESSION:NUMBER|0;
				-STATEMENT:;
				+STATEMENT:SET|l_cube_pos_action;
					=EXPRESSION:STRING|A;
				-STATEMENT:;
			-STATEMENT_GROUP:;
			+STATEMENT_GROUP:;
				=EXPRESSION:STRING|L;
				+STATEMENT:SET|l_cube_position_sequ;
					=EXPRESSION:NUMBER|99999999;
				-STATEMENT:;
				+STATEMENT:SET|l_cube_pos_action;
					=EXPRESSION:STRING|B;
				-STATEMENT:;
			-STATEMENT_GROUP:;
			+STATEMENT_GROUP:;
				+STATEMENT:SET|l_cube_pos_action;
					=EXPRESSION:REF_NAME|p_cube_pos_action;
				-STATEMENT:;
			-STATEMENT_GROUP:;
		-STATEMENT:;
		+STATEMENT:ITERATION|forever;
			+STATEMENT:SELECTION|IF;
				+STATEMENT_GROUP:;
					+EXPRESSION:CONDITION|IN;
						=EXPRESSION:REF_NAME|p_cube_pos_action;
						+EXPRESSION:LIST;
							=EXPRESSION:STRING|B;
							=EXPRESSION:STRING|A;
						-EXPRESSION:;
					-EXPRESSION:;
					=STATEMENT:NOTE|Read sequence number of the target.;
					+STATEMENT:READ|SINGLE;
						=READ_TABLE:v_<<OPERATION_TYPE:L>>|#;
						+GET:l_cube_position_sequ;
							+EXPRESSION:FUNCTION|COALESCE;
								+EXPRESSION:FUNCTION|MAX;
									=EXPRESSION:REF_NAME|cube_sequence;
								-EXPRESSION:;
								+EXPRESSION:FUNCTION|VALUEIF;
									=EXPRESSION:REF_NAME|p_cube_pos_action;
									=EXPRESSION:STRING|B;
									=EXPRESSION:NUMBER|99999999;
									=EXPRESSION:NUMBER|0;
								-EXPRESSION:;
							-EXPRESSION:;
						-GET:;
						+SELECTION:;
							+EXPRESSION:LOGICAL|AND;[[LOOP,ATTRIBUTE:1=Y]]
								+EXPRESSION:CONDITION|=;
									=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
									=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;
								-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
							-EXPRESSION:;
						-SELECTION:;
					-STATEMENT:;
				-STATEMENT_GROUP:;
			-STATEMENT:;
			=STATEMENT:NOTE|read sequence number near the target.;
			+STATEMENT:READ|SINGLE;
				=READ_TABLE:v_<<OPERATION_TYPE:L>>|#;
				+GET:l_cube_near_sequ;
					+EXPRESSION:FUNCTION|VALUEIF;
						=EXPRESSION:REF_NAME|l_cube_pos_action;
						=EXPRESSION:STRING|B;
						+EXPRESSION:FUNCTION|COALESCE;
							+EXPRESSION:FUNCTION|MAX;
								=EXPRESSION:REF_NAME|cube_sequence;
							-EXPRESSION:;
							=EXPRESSION:NUMBER|0;
						-EXPRESSION:;
						+EXPRESSION:FUNCTION|COALESCE;
							+EXPRESSION:FUNCTION|MIN;
								=EXPRESSION:REF_NAME|cube_sequence;
							-EXPRESSION:;
							=EXPRESSION:NUMBER|99999999;
						-EXPRESSION:;
					-EXPRESSION:;
				-GET:;
				+SELECTION:;
					+EXPRESSION:LOGICAL|AND;<<TEXT,IMPL_SELECT_SIBLINGS>>
						+EXPRESSION:LOGICAL|OR;
							+EXPRESSION:LOGICAL|AND;
								+EXPRESSION:CONDITION|=;
									=EXPRESSION:REF_NAME|l_cube_pos_action;
									=EXPRESSION:STRING|B;
								-EXPRESSION:;
								+EXPRESSION:CONDITION|<;
									=EXPRESSION:REF_NAME|cube_sequence;
									=EXPRESSION:REF_NAME|l_cube_position_sequ;
								-EXPRESSION:;
							-EXPRESSION:;
							+EXPRESSION:LOGICAL|AND;
								+EXPRESSION:CONDITION|=;
									=EXPRESSION:REF_NAME|l_cube_pos_action;
									=EXPRESSION:STRING|A;
								-EXPRESSION:;
								+EXPRESSION:CONDITION|>;
									=EXPRESSION:REF_NAME|cube_sequence;
									=EXPRESSION:REF_NAME|l_cube_position_sequ;
								-EXPRESSION:;
							-EXPRESSION:;
						-EXPRESSION:;
					-EXPRESSION:;
				-SELECTION:;
			-STATEMENT:;
			+STATEMENT:SELECTION|IF;
				+STATEMENT_GROUP:;
					+EXPRESSION:CONDITION|>;
						+EXPRESSION:FUNCTION|ABS;
							+EXPRESSION:CALCULATION;
								+EXPRESSION:CALCULATION_ITEM|+;
									=EXPRESSION:REF_NAME|l_cube_position_sequ;
								-EXPRESSION:;
								+EXPRESSION:CALCULATION_ITEM|-;
									=EXPRESSION:REF_NAME|l_cube_near_sequ;
								-EXPRESSION:;
							-EXPRESSION:;
						-EXPRESSION:;
						=EXPRESSION:NUMBER|1;
					-EXPRESSION:;
					+STATEMENT:SET|p_cube_sequence;
						+EXPRESSION:CALCULATION;
							+EXPRESSION:CALCULATION_ITEM|+;
								=EXPRESSION:REF_NAME|l_cube_position_sequ;
							-EXPRESSION:;
							+EXPRESSION:CALCULATION_ITEM|-;
								+EXPRESSION:CALCULATION;
									+EXPRESSION:CALCULATION_ITEM|+;
										=EXPRESSION:REF_NAME|l_cube_position_sequ;
									-EXPRESSION:;
									+EXPRESSION:CALCULATION_ITEM|-;
										=EXPRESSION:REF_NAME|l_cube_near_sequ;
									-EXPRESSION:;
								-EXPRESSION:;
							-EXPRESSION:;
							+EXPRESSION:CALCULATION_ITEM|/;
								=EXPRESSION:NUMBER|2;
							-EXPRESSION:;
						-EXPRESSION:;
						=REMARK:Formula both directions OK.;
					-STATEMENT:;
					=STATEMENT:STOP_ITERATION;
				-STATEMENT_GROUP:;
				+STATEMENT_GROUP:;
					=STATEMENT:NOTE|renumber.;
					+STATEMENT:ITERATION|cursor|r_<<OPERATION_TYPE1:L>>;
						=READ_TABLE:v_<<OPERATION_TYPE:L>>|#;
						+GET:row_id;
							=EXPRESSION:REF_NAME|rowid;
						-GET:;[[IF:!ROOT[OR]3=Y]]
						+SELECTION:;
							+EXPRESSION:LOGICAL|AND;<<TEXT,IMPL_SELECT_SIBLINGS>>
							-EXPRESSION:;
						-SELECTION:;[[ENDIF]]
						+SORT_ORDER:;
							=EXPRESSION:REF_NAME|cube_sequence;
						-SORT_ORDER:;
						+STATEMENT:UPDATE|v_<<OPERATION_TYPE:L>>;
							+SET:cube_sequence;
								=EXPRESSION:REF_NAME|l_cube_count;
							-SET:;
							+SELECTION:;
								+EXPRESSION:CONDITION|=;
									=EXPRESSION:REF_NAME|rowid;
									=EXPRESSION:REF_NAME|r_<<OPERATION_TYPE1:L>>.row_id;
								-EXPRESSION:;
							-SELECTION:;
						-STATEMENT:;
						+STATEMENT:SET|l_cube_count;
							+EXPRESSION:CALCULATION;
								+EXPRESSION:CALCULATION_ITEM|+;
									=EXPRESSION:REF_NAME|l_cube_count;
								-EXPRESSION:;
								+EXPRESSION:CALCULATION_ITEM|+;
									=EXPRESSION:NUMBER|1024;
								-EXPRESSION:;
							-EXPRESSION:;
						-STATEMENT:;
					-STATEMENT:;
				-STATEMENT_GROUP:;
			-STATEMENT:;
		-STATEMENT:;[[*
*]][[ELSIF,SERVICE:1=change_parent]]
		+STATEMENT:SELECTION|IF;
			+STATEMENT_GROUP:;
				+EXPRESSION:CONDITION|=;
					=EXPRESSION:REF_NAME|p_cube_flag_root;
					=EXPRESSION:STRING|Y;
				-EXPRESSION:;
				+STATEMENT:UPDATE|v_<<OPERATION_TYPE:L>>;[[LOOP,ATTRIBUTE:3=R]]
					+SET:<<ATTRIBUTE:L>>;
						=EXPRESSION:NULL;
					-SET:;[[ENDLOOP,ATTRIBUTE]]
					+SELECTION:;
						+EXPRESSION:LOGICAL|AND;[[LOOP,ATTRIBUTE:1=Y]]
							+EXPRESSION:CONDITION|=;
								=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
								=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;
							-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
						-EXPRESSION:;
					-SELECTION:;
				-STATEMENT:;<<TEXT,IMPL_SQL_NOT_FOUND>>[[IF:6=K]]
				+STATEMENT:USE|get_next_<<OPERATION_TYPE1:L>>|Y;
					+EXPRESSION:LIST;[[LOOP,ATTRIBUTE:1=Y[OR]3=R]][[IF:3=R]]
						=EXPRESSION:NULL;[[ELSE]]
						=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;[[ENDIF]][[ENDLOOP,ATTRIBUTE]]
					-EXPRESSION:;
				-STATEMENT:;[[ENDIF]]
			-STATEMENT_GROUP:;
			+STATEMENT_GROUP:;
				+STATEMENT:USE|check_no_part_<<OPERATION_TYPE1:L>>|N;
					+EXPRESSION:LIST;[[LOOP,ATTRIBUTE:1=Y]]
						=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;[[ENDLOOP,ATTRIBUTE]][[LOOP,ATTRIBUTE:1=Y[AND]!3=F]]
						=EXPRESSION:REF_NAME|x_<<ATTRIBUTE:L>>;[[ENDLOOP,ATTRIBUTE]]
					-EXPRESSION:;
				-STATEMENT:;
				+STATEMENT:UPDATE|v_<<OPERATION_TYPE:L>>;[[LOOP,ATTRIBUTE:3=R]]
					+SET:<<ATTRIBUTE:L>>;
						=EXPRESSION:REF_NAME|x_[[LOOP,ATTRIBUTE_SOURCE]]<<ATTRIBUTE_SOURCE:L>>[[ENDLOOP,ATTRIBUTE_SOURCE]];
					-SET:;[[ENDLOOP,ATTRIBUTE]]
					+SELECTION:;
						+EXPRESSION:LOGICAL|AND;[[LOOP,ATTRIBUTE:1=Y]]
							+EXPRESSION:CONDITION|=;
								=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
								=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;
							-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
						-EXPRESSION:;
					-SELECTION:;
				-STATEMENT:;<<TEXT,IMPL_SQL_NOT_FOUND>>[[IF:6=K]]
				+STATEMENT:USE|get_next_<<OPERATION_TYPE1:L>>|Y;
					+EXPRESSION:LIST;[[LOOP,ATTRIBUTE:1=Y[OR]3=R]]
						=EXPRESSION:REF_NAME|[[IF:3=R]]x_[[LOOP,ATTRIBUTE_SOURCE]]<<ATTRIBUTE_SOURCE:L>>[[ENDLOOP,ATTRIBUTE_SOURCE]][[ELSE]]p_<<ATTRIBUTE:L>>[[ENDIF]];[[ENDLOOP,ATTRIBUTE]]
					-EXPRESSION:;
				-STATEMENT:;[[ENDIF]]
			-STATEMENT_GROUP:;
		-STATEMENT:;[[*
*]][[ELSIF,SERVICE:1=create]][[IF:6=P]]
		+VARIABLE:l_cube_sequence||NUMBER|8|0;[[IF:!CHILD(ATTRIBUTE:<<TEXT,GEN_IS_OWN_KEY>>)]]
			=EXPRESSION:NUMBER|1;[[ENDIF]]
		-VARIABLE:;[[IF:CHILD(ATTRIBUTE:<<TEXT,GEN_IS_OWN_KEY>>)]]<<TEXT,IMPL_VAL_POS_ACTION>><<TEXT,IMPL_USE_DETERM_POS[|]p[|]>>[[ENDIF]][[ENDIF]]
		+STATEMENT:CREATE|v_<<OPERATION_TYPE:L>>;[[LOOP,ATTRIBUTE]]
			+SET:<<ATTRIBUTE:L>>;
				=EXPRESSION:[[IF:CHILD(DERIVATION)[AND]!0=CUBE_SEQUENCE]]NULL[[ELSE]]REF_NAME|[[IF:0=CUBE_SEQUENCE]]l_[[ELSE]]p_[[ENDIF]]<<ATTRIBUTE:L>>[[ENDIF]];
			-SET:;[[ENDLOOP,ATTRIBUTE]]
		-STATEMENT:;[[IF:6=K]]
		=STATEMENT:SPACE|;
		+STATEMENT:USE|get_next_<<OPERATION_TYPE1:L>>|Y;
			+EXPRESSION:LIST;[[LOOP,ATTRIBUTE:1=Y[OR]3=R]]
				=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;[[ENDLOOP,ATTRIBUTE]]
			-EXPRESSION:;
		-STATEMENT:;[[ENDIF]]
		+EXCEPTION:E001;
			+STATEMENT:ABORT;
				=EXPRESSION:STRING|Type <<OPERATION_TYPE:L>> already exists;
			-STATEMENT:;
		-EXCEPTION:;[[*
*]][[ELSIF,SERVICE:1=update]]
		+STATEMENT:UPDATE|v_<<OPERATION_TYPE:L>>;[[LOOP,ATTRIBUTE:!1=Y[AND]!CHILD(DERIVATION)[AND]!0=CUBE_SEQUENCE]]
			+SET:<<ATTRIBUTE:L>>;
				=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;
			-SET:;[[ENDLOOP,ATTRIBUTE]]
			+SELECTION:;
				+EXPRESSION:LOGICAL|AND;[[LOOP,ATTRIBUTE:1=Y]]
					+EXPRESSION:CONDITION|=;
						=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
						=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;
					-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
				-EXPRESSION:;
			-SELECTION:;
		-STATEMENT:;[[*
*]][[ELSIF,SERVICE:1=delete]]
		+STATEMENT:DELETE|v_<<OPERATION_TYPE:L>>;
			+SELECTION:;
				+EXPRESSION:LOGICAL|AND;[[LOOP,ATTRIBUTE:1=Y]]
					+EXPRESSION:CONDITION|=;
						=EXPRESSION:REF_NAME|<<ATTRIBUTE:L>>;
						=EXPRESSION:REF_NAME|p_<<ATTRIBUTE:L>>;
					-EXPRESSION:;[[ENDLOOP,ATTRIBUTE]]
				-EXPRESSION:;
			-SELECTION:;
		-STATEMENT:;[[*
*]][[ENDIF]]
	-PROCEDURE:;[[ENDLOOP,OPERATION_TYPE]][[ENDLOOP,OPERATION]][[ENDLOOP,SERVICE]]
-PACKAGE:;[[ENDLOOP,BUSINESS_OBJECT_TYPE]][[ENDLOOP,SYSTEM_BO_TYPE]][[ENDLOOP,SYSTEM]][[ENDBODY]]