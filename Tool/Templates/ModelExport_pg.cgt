Change log:
21-08-2016 - REFERENCE renamed to EXTERNAL_REFERENCE
29-10-2017 - Meta model added.
17-11-2017 - Sequence of reference added to ref tag.
20-01-2018 - Referenece name in stead of sequence.
05-03-2018 - Reference type prefixen with source type
14-05-2018 - Support of type specialisations
22-05-2018 - Scope system (system and business_object_type
22-02-2023 - Migratie naar Postgresql
[[TEXT,PROCEDURE]]
		CREATE OR REPLACE PROCEDURE report_<<TYPE1:L>><<TEXT,SIGNATURE>> LANGUAGE plpgsql AS $$
		BEGIN
			FOR r_<<TYPE1:L>> IN
				SELECT *				
				FROM t_<<TYPE:L>>[[IF:!ROOT]]
				WHERE [[LOOP,ATTRIBUTE:3=F[AND]!CHILD(DERIVATION)]]<<ATTRIBUTE:L>> = p_<<TEXT,F_FKEY>>[[IF:!LAST]]
				AND [[ENDIF]][[ENDLOOP,ATTRIBUTE]][[LOOP,ATTRIBUTE:3=R[AND]!CHILD(DERIVATION)]]
				AND <<ATTRIBUTE:L>><<TEXT,IS_R_FKEY>>[[ENDLOOP,ATTRIBUTE]][[ELSIF:0=SYSTEM]]
				WHERE g_system_name = 'ALL' OR name = g_system_name[[ELSIF:0=BUSINESS_OBJECT_TYPE]]
				WHERE (g_system_name = 'ALL' OR name in (SELECT xk_bot_name FROM t_system_bo_type WHERE fk_sys_name = g_system_name ))[[ENDIF]]
				ORDER BY [[IF:6=K]][[LOOP,ATTRIBUTE:1=Y]]<<ATTRIBUTE:L>>[[IF:!LAST]], [[ENDIF]][[ENDLOOP,ATTRIBUTE]][[ELSIF:6=P]]cube_sequence[[ELSE]]cube_id[[ENDIF]]
			LOOP
				g_line_num := g_line_num + 1;
				INSERT INTO cube.line VALUES(g_line_num, ftabs(g_level) || '[[IF:CHILD(TYPE)[OR]CHILD(REFERENCE)]]+[[ELSE]]=[[ENDIF]]<<TYPE:U>>[' || r_<<TYPE1:L>>.cube_id || ']:' || [[LOOP,ATTRIBUTE:3=N[AND]!CHILD(DERIVATION)]]fenperc(r_<<TYPE1:L>>.<<ATTRIBUTE:L>>) || [[IF:!LAST]]'|' || [[ENDIF]][[ENDLOOP,ATTRIBUTE]]';');
				g_level := g_level + 1;[[LOOP,TYPE]]
				report_<<TYPE1:L>> (r_<<TYPE(N-1)1:L>>);[[ENDLOOP,TYPE]][[IF:3=Y]]
				report_<<TYPE1:L>>_recursive (r_<<TYPE1:L>>);[[ENDIF]][[LOOP,REFERENCE]]
				BEGIN
					SELECT cube_id INTO g_cube_id FROM [[LOOP,REFERENCE_TYPE:FIRST]]t_<<REFERENCE_TYPE:L>>[[ENDLOOP,REFERENCE_TYPE]]
					WHERE [[LOOP,FKEY]][[LOOP,ATTRIBUTE_SOURCE]]<<ATTRIBUTE_SOURCE:L>>[[ENDLOOP,ATTRIBUTE_SOURCE]] = r_<<TYPE1:L>>.<<FKEY:L>>[[IF:!LAST]]
					AND [[ENDIF]][[ENDLOOP,FKEY]];

					g_line_num := g_line_num + 1;
					INSERT INTO cube.line VALUES(g_line_num, ftabs(g_level) || '>[[LOOP,REFERENCE_TYPE]][[IF:0=TYPE]]<<TYPE:U>>_[[ENDIF]]<<REFERENCE_TYPE:U>>[[ENDLOOP,REFERENCE_TYPE]][[IF:!3=0]]_<<REFERENCE:U>>[[ENDIF]]:' || l_cube_id || ';');
				EXCEPTION
					WHEN NO_DATA_FOUND THEN
						NULL; 
				END;[[ENDLOOP,REFERENCE]]
				g_level := g_level - 1;[[IF:CHILD(TYPE)[OR]CHILD(REFERENCE)]]
				g_line_num := g_line_num + 1;
				INSERT INTO cube.line VALUES(g_line_num, ftabs(g_level) || '-<<TYPE:U>>:' || [[LOOP,ATTRIBUTE:3=N[AND]!CHILD(DERIVATION)]][[IF:FIRST]]r_<<TYPE1:L>>.<<ATTRIBUTE:L>> || [[ENDIF]][[ENDLOOP,ATTRIBUTE]]';');[[ENDIF]]
			END LOOP;
		END; 
		$$
[[ENDTEXT]]
[[TEXT,SIGNATURE_RECURSIVE]]_recursive (p_<<TYPE1:L>> IN t_<<TYPE:L>>%ROWTYPE)[[ENDTEXT]]
[[TEXT,SIGNATURE_NORMAL]][[IF:!ROOT]] (p_<<TYPE(N-1)1:L>> IN t_<<TYPE(N-1):L>>%ROWTYPE)[[ENDIF]][[ENDTEXT]]
[[TEXT,F_FKEY_RECURSIVE]]<<TYPE1:L>>.<<ATTRIBUTE:L>>[[ENDTEXT]]
[[TEXT,F_FKEY_NORMAL]]<<TYPE(N-1)1:L>>.[[LOOP,ATTRIBUTE_SOURCE]]<<ATTRIBUTE_SOURCE:L>>[[ENDLOOP,ATTRIBUTE_SOURCE]][[ENDTEXT]]
[[TEXT,IS_R_FKEY_RECURSIVE]] = p_<<TYPE1:L>>.[[LOOP,ATTRIBUTE_SOURCE]]<<ATTRIBUTE_SOURCE:L>>[[ENDLOOP,ATTRIBUTE_SOURCE]][[ENDTEXT]]
[[TEXT,IS_R_FKEY_NORMAL]] IS NULL[[ENDTEXT]]
[[TEXT,META_DESCRIPTION]][[LOOP,<<T1>>]]'||REPLACE('<<<<T1>>:P>>','%20',' ')||'[[ENDLOOP,<<T1>>]][[ENDTEXT]]
[[BODY]]-- Model export
\o :model 
\pset tuples_only
\pset format unaligned
\pset fieldsep ''
[[LOOP,SYSTEM:0=<<1>>]]
SELECT '! Generated with CubeGen';
SELECT '+META_MODEL:CUBE;';[[LOOP,SYSTEM_BO_TYPE]][[LOOP,BUSINESS_OBJECT_TYPE]][[LOOP,TYPE]]
SELECT '[[FOR,TYPE:1>N]]	[[ENDFOR]]+META_TYPE:<<TYPE:U>>|<<TEXT,META_DESCRIPTION[|]DESCRIPTION_TYPE[|]>>;';[[LOOP,ATTRIBUTE:3=N[AND]4=N]]
SELECT '[[FOR,TYPE:1>N]]	[[ENDFOR]]	=PROPERTY:[[IF:FIRST]][[EVAL:$myI=0]][[ELSE]][[EVAL:++$myI]][[ENDIF]]|<<ATTRIBUTE:C>>|<<TEXT,META_DESCRIPTION[|]DESCRIPTION_ATTRIBUTE[|]>>[[LOOP,INFORMATION_TYPE_ELEMENT]][[LOOP,PERMITTED_VALUE]][[IF:FIRST]] Values:[[ENDIF]] <<PERMITTED_VALUE>>(<<PERMITTED_VALUE1>>)[[IF:!LAST]],[[ENDIF]][[ENDLOOP,PERMITTED_VALUE]][[ENDLOOP,INFORMATION_TYPE_ELEMENT]];';[[ENDLOOP,ATTRIBUTE]][[LOOP,REFERENCE]]
SELECT '[[FOR,TYPE:1>N]]	[[ENDFOR]]	=ASSOCIATION:[[LOOP,REFERENCE_TYPE:FIRST]][[IF:0=TYPE]]<<TYPE:U>>_[[ENDIF]]<<REFERENCE_TYPE:U>>[[ENDLOOP,REFERENCE_TYPE]][[IF:!3=0]]_<<REFERENCE:U>>[[ENDIF]]|<<REFERENCE:C>>|[[LOOP,REFERENCE_TYPE:FIRST]]<<REFERENCE_TYPE:U>>[[ENDLOOP,REFERENCE_TYPE]]|<<TEXT,META_DESCRIPTION[|]DESCRIPTION_REFERENCE[|]>>;';[[ENDLOOP,REFERENCE]][[REPEAT]]
SELECT '[[FOR,TYPE:1>N]]	[[ENDFOR]]-META_TYPE:<<TYPE:U>>;';[[ENDLOOP,TYPE]][[ENDLOOP,BUSINESS_OBJECT_TYPE]][[ENDLOOP,SYSTEM_BO_TYPE]]
SELECT '-META_MODEL:CUBE;';

DO $BODY$
	DECLARE
		g_level NUMERIC(4) := 0;
		g_cube_id VARCHAR(16);
		g_system_name VARCHAR(30) :=  '&2';
		g_line_num NUMERIC(8) := 0;
	BEGIN
		CREATE OR REPLACE FUNCTION ftabs (p_level IN NUMERIC) RETURNS VARCHAR LANGUAGE plpgsql AS $$
		DECLARE
				l_tabs VARCHAR(80) := '';
		BEGIN
			FOR i IN 1..p_level
			LOOP
				l_tabs := l_tabs || '	';
			END LOOP;
			RETURN(l_tabs);		
		END; 
		$$;
		
		CREATE OR REPLACE FUNCTION fenperc (p_text IN VARCHAR) RETURNS VARCHAR LANGUAGE plpgsql AS $$
		BEGIN
			RETURN(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(p_text,'%','%25'),';','%3B'),'"','%22'),'|','%7C'),CHR(13),'%0D'),CHR(10),'%0A'),CHR(9),'%09'));		
		END;
		$$;

		CREATE SCHEMA IF NOT EXISTS cube;
		CREATE TABLE IF NOT EXISTS cube.line ();
		ALTER TABLE cube.line ADD COLUMN IF NOT EXISTS num NUMERIC(8);
		ALTER TABLE cube.line ADD COLUMN IF NOT EXISTS str VARCHAR;
		DELETE FROM cube.line;
[[LOOP,SYSTEM_BO_TYPE]][[LOOP,BUSINESS_OBJECT_TYPE]][[LOOP,TYPE]][[REPEAT]][[IF:3=Y]]
<<TEXT,PROCEDURE.RECURSIVE>>[[ENDIF]]
<<TEXT,PROCEDURE.NORMAL>>[[ENDLOOP,TYPE]][[ENDLOOP,BUSINESS_OBJECT_TYPE]][[ENDLOOP,SYSTEM_BO_TYPE]]
[[LOOP,SYSTEM_BO_TYPE]][[LOOP,BUSINESS_OBJECT_TYPE]][[LOOP,TYPE]]
		report_<<TYPE1:L>>;[[ENDLOOP,TYPE]][[ENDLOOP,BUSINESS_OBJECT_TYPE]][[ENDLOOP,SYSTEM_BO_TYPE]]
	END;
$BODY$;[[ENDLOOP,SYSTEM]]

SELECT str FROM cube.line ORDER BY num;
\o[[ENDBODY]]