Change log:
30-11-2016 - Fix in logged sequence name	
10-11-2021 - DBMS independent
16-11-2022 - Migration to Postgresql
[[INCLUDE,Includes/general.cgt]]
[[BODY]]-- ALTER TABLE DDL
--[[LOOP,DATABASE]]
DO $BODY$
	DECLARE
		rec_schema RECORD;
		rec_sequence RECORD;
		rec_table RECORD;
		rec_column RECORD;
	BEGIN
		FOR rec_schema IN 
			SELECT schema_name 
			FROM information_schema.schemata
			WHERE schema_owner = '<<1>>'
			  AND schema_name NOT IN ('cube'[[LOOP,SCHEMA]],'<<SCHEMA:L>>'[[ENDLOOP,SCHEMA]])
		LOOP
			EXECUTE 'DROP SCHEMA ' || rec_schema.schema_name || ' CASCADE';
		END LOOP;
		
		FOR rec_schema IN 
			SELECT catalog_name, schema_name 
			FROM information_schema.schemata
			WHERE schema_owner = '<<1>>'
		LOOP
			CASE rec_schema.schema_name[[LOOP,SCHEMA]]
			WHEN '<<SCHEMA:L>>' THEN
				FOR rec_sequence IN
					SELECT sequence_name
					FROM information_schema.sequences
					WHERE sequence_catalog = rec_schema.catalog_name
					  AND sequence_schema = rec_schema.schema_name[[IF:CHILD(SEQUENCE)]]
					  AND sequence_name NOT IN ([[LOOP,SEQUENCE]]'<<SEQUENCE:L>>'[[IF:!LAST]],[[ENDIF]][[ENDLOOP,SEQUENCE]])[[ENDIF]]
				LOOP
					EXECUTE 'DROP SEQUENCE ' || rec_schema.schema_name || '.' || rec_sequence.sequence_name;
				END LOOP;
				FOR rec_table IN
					SELECT table_name
					FROM information_schema.tables
					WHERE table_type = 'BASE TABLE'
					  AND table_catalog = rec_schema.catalog_name
					  AND table_schema = rec_schema.schema_name[[IF:CHILD(TABLE)]]
					  AND table_name NOT IN ([[LOOP,TABLE]]'<<TABLE:L>>'[[IF:!LAST]],[[ENDIF]][[ENDLOOP,TABLE]])[[ENDIF]]
				LOOP
					EXECUTE 'DROP TABLE ' || rec_schema.schema_name || '.' || rec_table.table_name;
				END LOOP;[[IF:CHILD(TABLE)]]
				FOR rec_table IN
					SELECT table_name
					FROM information_schema.tables 
					WHERE table_type = 'BASE TABLE'
					  AND table_catalog = rec_schema.catalog_name
					  AND table_schema = rec_schema.schema_name
					  AND table_name IN ([[LOOP,TABLE]]'<<TABLE:L>>'[[IF:!LAST]],[[ENDIF]][[ENDLOOP,TABLE]])
				LOOP
					CASE rec_table.table_name[[LOOP,TABLE]]
					WHEN '<<TABLE:L>>' THEN
						FOR rec_column IN
							SELECT column_name
							FROM information_schema.columns
							WHERE table_catalog = rec_schema.catalog_name
							  AND table_schema = rec_schema.schema_name
							  AND table_name = rec_table.table_name[[IF:CHILD(COLUMN)]] 
							  AND column_name NOT IN ([[LOOP,COLUMN]]'<<COLUMN:L>>'[[IF:!LAST]],[[ENDIF]][[ENDLOOP,COLUMN]])[[ENDIF]]
						LOOP
							EXECUTE 'ALTER TABLE ' || rec_schema.schema_name || '.' || rec_table.table_name || ' DROP COLUMN ' || rec_column.column_name || ' CASCADE';
						END LOOP;[[ENDLOOP,TABLE]]
					END CASE;
					[[ENDIF]]					
				END LOOP;[[ENDLOOP,SCHEMA]]
			WHEN 'cube' THEN
				-- nop
			END CASE;
		END LOOP;
	END;
$BODY$;[[LOOP,SCHEMA]]

CREATE SCHEMA IF NOT EXISTS <<SCHEMA:L>>;[[LOOP,SEQUENCE]]
CREATE SEQUENCE IF NOT EXISTS <<SCHEMA:L>>.<<SEQUENCE:L>> START WITH <<SEQUENCE1>>;[[ENDLOOP,SEQUENCE]][[LOOP,TABLE]]

CREATE TABLE IF NOT EXISTS <<SCHEMA:L>>.<<TABLE:L>> ([[LOOP,COLUMN]]
	<<COLUMN:L>> <<TEXT,GEN_DOMAIN_PG[|]<<COLUMN3>>[|]<<COLUMN4>>[|]>>[[IF:!5=]] DEFAULT '<<COLUMN5>>'[[ENDIF]],[[ENDLOOP,COLUMN]]
	CONSTRAINT <<TABLE1:L>>
		PRIMARY KEY ([[LOOP,COLUMN:1=Y]]<<COLUMN:L>>[[IF:!LAST]], [[ENDIF]][[ENDLOOP,COLUMN]])[[LOOP,FOREIGN_KEY]],
	CONSTRAINT <<FOREIGN_KEY:L>>
		FOREIGN KEY ([[LOOP,COLUMN]]<<COLUMN:L>>[[IF:!LAST]], [[ENDIF]][[ENDLOOP,COLUMN]])
		REFERENCES <<SCHEMA:L>>.<<FOREIGN_KEY1:L>> ([[LOOP,COLUMN]]<<COLUMN1:L>>[[IF:!LAST]], [[ENDIF]][[ENDLOOP,COLUMN]])[[IF:2=Y]]
		ON DELETE CASCADE[[ENDIF]][[ENDLOOP,FOREIGN_KEY]] );[[ENDLOOP,TABLE]][[ENDLOOP,SCHEMA]]

\q


SET SERVEROUTPUT ON;[[LOOP,SCHEMA]][[LOOP,SEQUENCE]]
DECLARE
	l_count NUMBER(4);
BEGIN
	SELECT COUNT(1) INTO l_count FROM all_sequences WHERE sequence_owner = '<<DATABASE1:U>>' AND sequence_name = '<<SEQUENCE:U>>';
	IF l_count = 0 THEN
		EXECUTE IMMEDIATE 
		'CREATE SEQUENCE <<SEQUENCE:L>> START WITH <<SEQUENCE1>>';
		DBMS_OUTPUT.PUT_LINE('Sequence <<SEQUENCE:U>> created');
	END IF;
END;
/[[ENDLOOP,SEQUENCE]][[ENDLOOP,SCHEMA]][[LOOP,SCHEMA]][[LOOP,TABLE]]
DECLARE
	l_count NUMBER(4);
BEGIN
	DBMS_OUTPUT.PUT_LINE('Prepare table <<TABLE:U>>');
	SELECT COUNT(1) INTO l_count FROM all_tables WHERE owner = '<<DATABASE1:U>>' AND table_name = '<<TABLE:U>>';
	IF l_count = 0 THEN
		EXECUTE IMMEDIATE
		'CREATE TABLE <<TABLE:L>> ([[LOOP,COLUMN]]
			<<COLUMN:L>> <<TEXT,GEN_DOMAIN_ORA[|]<<COLUMN3>>[|]<<COLUMN4>>[|]>>[[IF:!5=]] DEFAULT ''<<COLUMN5>>''[[ENDIF]][[IF:!LAST]],[[ENDIF]][[ENDLOOP,COLUMN]])';
		DBMS_OUTPUT.PUT_LINE('Table <<TABLE:U>> created');
	ELSE[[LOOP,COLUMN]]
		SELECT COUNT(1) INTO l_count FROM all_tab_columns WHERE owner = '<<DATABASE1:U>>' AND table_name = '<<TABLE:U>>' AND column_name = '<<COLUMN:U>>';
		IF l_count = 0 THEN
			EXECUTE IMMEDIATE
			'ALTER TABLE <<TABLE:L>> ADD <<COLUMN:L>> <<TEXT,GEN_DOMAIN_ORA[|]<<COLUMN3>>[|]<<COLUMN4>>[|]>>[[IF:!5=]] DEFAULT ''<<COLUMN5>>''[[ENDIF]]';
			DBMS_OUTPUT.PUT_LINE('Column <<TABLE:U>>.<<COLUMN:U>> created');
		END IF;[[ENDLOOP,COLUMN]]
		FOR r_key IN (SELECT constraint_name FROM all_constraints WHERE owner = '<<DATABASE1:U>>' AND table_name = '<<TABLE:U>>' AND constraint_type IN ('P','U','R') ORDER BY constraint_type DESC)
		LOOP
			EXECUTE IMMEDIATE
			'ALTER TABLE <<TABLE:L>> DROP CONSTRAINT ' || r_key.constraint_name || ' CASCADE';
			DBMS_OUTPUT.PUT_LINE('Primary Key <<TABLE:U>>.' || UPPER(r_key.constraint_name) || ' dropped');
		END LOOP;
		FOR r_index IN (SELECT index_name FROM all_indexes WHERE owner = '<<DATABASE1:U>>' AND table_name = '<<TABLE:U>>')
		LOOP
			EXECUTE IMMEDIATE
			'DROP INDEX ' || r_index.index_name;
			DBMS_OUTPUT.PUT_LINE('Index <<TABLE:U>>.' || UPPER(r_index.index_name) || ' dropped');
		END LOOP;
	END IF;
END;
/[[ENDLOOP,TABLE]][[ENDLOOP,SCHEMA]][[******** DROP TABLE MANUAL
BEGIN
	FOR r_table IN (SELECT t.table_name FROM all_tables t, all_tab_comments c
				WHERE t.table_name = c.table_name
				  AND t.owner = '<<DATABASE1:U>>'[[LOOP,SCHEMA]][[LOOP,TABLE]][[IF:FIRST]]
				  AND t.table_name NOT IN ([[ENDIF]]
							'<<TABLE:U>>'[[IF:!LAST]],[[ELSE]])[[ENDIF]][[ENDLOOP,TABLE]][[ENDLOOP,SCHEMA]]
				  AND SUBSTR(t.table_name,1,7) <> 'T_CUBE_')
	LOOP
		EXECUTE IMMEDIATE
		'DROP TABLE ' || r_table.table_name || ' CASCADE CONSTRAINTS';
		DBMS_OUTPUT.PUT_LINE('Table ' || UPPER(r_table.table_name) || ' dropped');
	END LOOP;
END;
/******]][[LOOP,SCHEMA]][[LOOP,TABLE]]
BEGIN
	DBMS_OUTPUT.PUT_LINE('Maintain table <<TABLE:U>>');
	FOR r_field IN (SELECT column_name,
		data_type || DECODE (data_type,'VARCHAR2','('||char_length||')','NUMBER','('||data_precision||DECODE(data_scale,0,'',','||data_scale)||')','CHAR','('||char_length||')','') old_domain,
		data_default old_default_value,
  		DECODE(column_name,[[LOOP,COLUMN]]
			'<<COLUMN:U>>','<<TEXT,GEN_DOMAIN_ORA[|]<<COLUMN3>>[|]<<COLUMN4>>[|]>>',[[ENDLOOP,COLUMN]]NULL) new_domain,
		DECODE(column_name,[[LOOP,COLUMN]]
			'<<COLUMN:U>>',[[IF:!5=]]'''<<COLUMN5>>'''[[ELSE]]NULL[[ENDIF]],[[ENDLOOP,COLUMN]]NULL) new_default_value
  		FROM all_tab_columns WHERE owner = '<<DATABASE1:U>>' AND table_name = '<<TABLE:U>>')
	LOOP
		IF r_field.old_domain <> r_field.new_domain THEN
			EXECUTE IMMEDIATE
			'ALTER TABLE <<TABLE:L>> RENAME COLUMN ' || r_field.column_name || ' TO old#domain#field';
			EXECUTE IMMEDIATE
			'ALTER TABLE <<TABLE:L>> ADD ' || r_field.column_name || ' ' || r_field.new_domain;
 			IF r_field.new_domain = 'VARCHAR2' THEN  
				EXECUTE IMMEDIATE
				'UPDATE <<TABLE:L>> SET ' || r_field.column_name || '= TRIM(old#domain#field)';
			ELSE
				EXECUTE IMMEDIATE
				'UPDATE <<TABLE:L>> SET ' || r_field.column_name || '= old#domain#field';
			END IF;
			EXECUTE IMMEDIATE
			'ALTER TABLE <<TABLE:L>> DROP COLUMN old#domain#field';
			DBMS_OUTPUT.PUT_LINE('Field <<TABLE:U>>.' || UPPER(r_field.column_name) || ' converted from ' || r_field.old_domain || ' to ' || r_field.new_domain);
		END IF;
		IF NOT((r_field.old_default_value IS NULL AND r_field.new_default_value IS NULL) OR r_field.old_default_value = r_field.new_default_value) THEN
			EXECUTE IMMEDIATE
			'ALTER TABLE <<TABLE:L>> MODIFY (' || r_field.column_name || ' DEFAULT ' || NVL(r_field.new_default_value,'NULL') || ')';
			DBMS_OUTPUT.PUT_LINE('Field <<TABLE:U>>.' || UPPER(r_field.column_name) || ' default value set to ' || NVL(r_field.new_default_value,'NULL'));
		END IF;
	END LOOP;
	EXECUTE IMMEDIATE
	'ALTER TABLE <<TABLE:L>> ADD CONSTRAINT <<TABLE1:L>>
		PRIMARY KEY ([[LOOP,COLUMN:1=Y]]
			<<COLUMN:L>>[[IF:!LAST]],[[ENDIF]][[ENDLOOP,COLUMN]] )';
	DBMS_OUTPUT.PUT_LINE('Primary Key <<TABLE:U>>.<<TABLE1:U>> created');[[LOOP,FOREIGN_KEY]]
	EXECUTE IMMEDIATE
	'ALTER TABLE <<TABLE:L>> ADD CONSTRAINT <<FOREIGN_KEY:L>>
		FOREIGN KEY ([[LOOP,COLUMN]]<<COLUMN:L>>[[IF:!LAST]], [[ENDIF]][[ENDLOOP,COLUMN]])
		REFERENCES <<FOREIGN_KEY1:L>> ([[LOOP,COLUMN]]<<COLUMN1:L>>[[IF:!LAST]], [[ENDIF]][[ENDLOOP,COLUMN]])[[IF:2=Y]]
		ON DELETE CASCADE[[ENDIF]]';[[ENDLOOP,FOREIGN_KEY]]
	FOR r_field IN (SELECT column_name FROM all_tab_columns WHERE owner = '<<DATABASE1:U>>' AND table_name = '<<TABLE:U>>' AND column_name NOT IN ([[LOOP,COLUMN]]
							'<<COLUMN:U>>'[[IF:!LAST]],[[ENDIF]][[ENDLOOP,COLUMN]]))
	LOOP
		EXECUTE IMMEDIATE
		'ALTER TABLE <<TABLE:L>> DROP COLUMN ' || r_field.column_name;
		DBMS_OUTPUT.PUT_LINE('Field <<TABLE:U>>.' || UPPER(r_field.column_name) || ' dropped');
	END LOOP;
END;
/[[ENDLOOP,TABLE]][[ENDLOOP,SCHEMA]][[ENDLOOP,DATABASE]]
EXIT;
[[ENDBODY]]