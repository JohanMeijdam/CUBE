Change log:
30-11-2016 - Fix in logged sequence name	
10-11-2021 - DBMS independent
16-11-2022 - Migration to Postgresql
01-07-2024 - CUBE-NULL rows
[[INCLUDE,Includes/general.cgt]]
[[INCLUDE,Includes/database_pg.cgt]]
[[BODY]]-- ALTER TABLE DDL
--[[LOOP,DATABASE]]
-- First remove all te constraints.
DO $BODY$
	DECLARE
		rec_constraint RECORD;
	BEGIN
		RAISE INFO 'Removing constraints';
		FOR rec_constraint IN
			SELECT table_schema, table_name, constraint_name
			FROM information_schema.table_constraints, information_schema.schemata
			WHERE constraint_catalog = catalog_name
			  AND constraint_schema = schema_name
			  AND constraint_type IN ('FOREIGN KEY','PRIMARY KEY')
			  AND schema_owner = '<<1>>'
			ORDER BY constraint_type
		LOOP
			EXECUTE 'ALTER TABLE ' || rec_constraint.table_schema || '.' || rec_constraint.table_name || ' DROP CONSTRAINT ' || rec_constraint.constraint_name;
		END LOOP;
	END;
$BODY$;

-- Delete CUBE-NULL records.
DO $BODY$
	DECLARE
	BEGIN
		RAISE INFO 'Deleting CUBE-NULL rows';[[LOOP,SCHEMA]][[LOOP,TABLE]]
		DELETE FROM <<TABLE:L>> WHERE cube_id = 'CUBE-NULL';[[ENDLOOP,TABLE]][[ENDLOOP,SCHEMA]]
	END;
$BODY$;

-- Drop all the sequences, tables and columns that are no longer applicable.
DO $BODY$
	DECLARE
		rec_schema RECORD;
		rec_sequence RECORD;
		rec_table RECORD;
		rec_column RECORD;
	BEGIN
		RAISE INFO 'Dropping objects that are no longer applicable';
		FOR rec_schema IN 
			SELECT schema_name 
			FROM information_schema.schemata
			WHERE schema_owner = '<<1>>'
			  AND schema_name NOT IN ('cube'[[LOOP,SCHEMA]],'<<SCHEMA:L>>'[[ENDLOOP,SCHEMA]])
		LOOP
			EXECUTE 'DROP SCHEMA ' || rec_schema.schema_name || ' CASCADE';
		END LOOP;
		
		FOR rec_schema IN 
			SELECT catalog_name, schema_name 
			FROM information_schema.schemata
			WHERE schema_owner = '<<1>>'
		LOOP
			CASE rec_schema.schema_name[[LOOP,SCHEMA]]
			WHEN '<<SCHEMA:L>>' THEN
				FOR rec_sequence IN
					SELECT sequence_name
					FROM information_schema.sequences
					WHERE sequence_catalog = rec_schema.catalog_name
					  AND sequence_schema = rec_schema.schema_name[[IF:CHILD(SEQUENCE)]]
					  AND sequence_name NOT IN ([[LOOP,SEQUENCE]]'<<SEQUENCE:L>>'[[IF:!LAST]],[[ENDIF]][[ENDLOOP,SEQUENCE]])[[ENDIF]]
				LOOP
					EXECUTE 'DROP SEQUENCE ' || rec_schema.schema_name || '.' || rec_sequence.sequence_name;
				END LOOP;
				FOR rec_table IN
					SELECT table_name
					FROM information_schema.tables
					WHERE table_type = 'BASE TABLE'
					  AND table_catalog = rec_schema.catalog_name
					  AND table_schema = rec_schema.schema_name[[IF:CHILD(TABLE)]]
					  AND table_name NOT IN ([[LOOP,TABLE]]'<<TABLE:L>>'[[IF:!LAST]],[[ENDIF]][[ENDLOOP,TABLE]])[[ENDIF]]
				LOOP
					EXECUTE 'DROP TABLE ' || rec_schema.schema_name || '.' || rec_table.table_name;
				END LOOP;[[IF:CHILD(TABLE)]]
				FOR rec_table IN
					SELECT table_name
					FROM information_schema.tables 
					WHERE table_type = 'BASE TABLE'
					  AND table_catalog = rec_schema.catalog_name
					  AND table_schema = rec_schema.schema_name
					  AND table_name IN ([[LOOP,TABLE]]'<<TABLE:L>>'[[IF:!LAST]],[[ENDIF]][[ENDLOOP,TABLE]])
				LOOP
					CASE rec_table.table_name[[LOOP,TABLE]]
					WHEN '<<TABLE:L>>' THEN
						FOR rec_column IN
							SELECT column_name
							FROM information_schema.columns
							WHERE table_catalog = rec_schema.catalog_name
							  AND table_schema = rec_schema.schema_name
							  AND table_name = rec_table.table_name[[IF:CHILD(COLUMN)]] 
							  AND column_name NOT IN ([[LOOP,COLUMN]]'<<COLUMN:L>>'[[IF:!LAST]],[[ENDIF]][[ENDLOOP,COLUMN]])[[ENDIF]]
						LOOP
							EXECUTE 'ALTER TABLE ' || rec_schema.schema_name || '.' || rec_table.table_name || ' DROP COLUMN ' || rec_column.column_name || ' CASCADE';
						END LOOP;[[ENDLOOP,TABLE]]
					END CASE;
					[[ENDIF]]					
				END LOOP;[[ENDLOOP,SCHEMA]]
			WHEN 'cube' THEN
				-- nop
			END CASE;
		END LOOP;
	END;
$BODY$;

-- Process column updates.
DO $BODY$
	DECLARE
		rec_column RECORD;
	BEGIN
		RAISE INFO 'Processing column updates';
		FOR rec_column IN 
			SELECT schema_name, table_name, column_name,
			(	CASE data_type 
				WHEN 'character varying' THEN COALESCE('VARCHAR('||character_maximum_length||')','VARCHAR') 
				WHEN 'numeric' THEN 'NUMERIC('||numeric_precision||(CASE WHEN numeric_scale > 0 THEN ','||numeric_scale||')' ELSE ')' END)
				WHEN 'date' THEN 'DATE' 
				WHEN 'time without time zone' THEN 'TIME' 
				WHEN 'timestamp without time zone' THEN 'TIMESTAMP' 
				ELSE 'ERROR' END ) cube_data_type
			FROM information_schema.schemata, information_schema.columns 
			WHERE table_schema = schema_name
			  AND schema_owner = '<<1>>'
			ORDER BY schema_name, table_name, column_name
		LOOP
			CASE rec_column.schema_name[[LOOP,SCHEMA]]			
			WHEN '<<SCHEMA:L>>' THEN
				CASE rec_column.table_name[[LOOP,TABLE]]			
				WHEN '<<TABLE:L>>' THEN
					CASE rec_column.column_name[[LOOP,COLUMN]]			
					WHEN '<<COLUMN:L>>' THEN
						IF rec_column.cube_data_type <> '<<TEXT,GEN_DOMAIN_PG[|]<<COLUMN3>>[|]<<COLUMN4>>[|]>>' THEN
							EXECUTE 'ALTER TABLE <<SCHEMA:L>>.<<TABLE:L>> RENAME COLUMN <<COLUMN:L>> TO _<<COLUMN:L>>' ;
						ELSE
							EXECUTE 'ALTER TABLE <<SCHEMA:L>>.<<TABLE:L>> ALTER COLUMN <<COLUMN:L>> [[IF:5=]]DROP DEFAULT[[ELSE]]SET DEFAULT ''<<COLUMN5>>''[[ENDIF]]';
						END IF;[[ENDLOOP,COLUMN]]
					END CASE;[[ENDLOOP,TABLE]]
				END CASE;[[ENDLOOP,SCHEMA]]
			WHEN 'cube' THEN
				-- nop
			END CASE;
		END LOOP;	
	END;
$BODY$;

-- Add all the new sequences, tables and columns and restore the constraints.
DO $BODY$
	DECLARE
	BEGIN
		SET client_min_messages TO WARNING;
		RAISE INFO 'Adding new objects';[[LOOP,SCHEMA]]

		EXECUTE 'CREATE SCHEMA IF NOT EXISTS <<SCHEMA:L>>';[[LOOP,SEQUENCE]]
		EXECUTE 'CREATE SEQUENCE IF NOT EXISTS <<SCHEMA:L>>.<<SEQUENCE:L>> START WITH <<SEQUENCE1>>';[[ENDLOOP,SEQUENCE]][[LOOP,TABLE]]

		EXECUTE 'CREATE TABLE IF NOT EXISTS <<SCHEMA:L>>.<<TABLE:L>> ()';[[LOOP,COLUMN]]
		EXECUTE 'ALTER TABLE <<SCHEMA:L>>.<<TABLE:L>> ADD COLUMN IF NOT EXISTS <<COLUMN:L>> <<TEXT,GEN_DOMAIN_PG[|]<<COLUMN3>>[|]<<COLUMN4>>[|]>>[[IF:!5=]] DEFAULT ''<<COLUMN5>>''[[ENDIF]]';[[ENDLOOP,COLUMN]][[IF:CHILD(COLUMN:1=Y)]]
		EXECUTE 'ALTER TABLE <<SCHEMA:L>>.<<TABLE:L>> ADD CONSTRAINT <<TABLE1:L>> PRIMARY KEY ([[LOOP,COLUMN:1=Y]]<<COLUMN:L>>[[IF:!LAST]], [[ENDIF]][[ENDLOOP,COLUMN]])';[[ENDIF]][[ENDLOOP,TABLE]][[ENDLOOP,SCHEMA]]
	END;
$BODY$;[[ENDLOOP,DATABASE]]
<<TEXT,DATABASE_INIT>>[[ENDLOOP,DATABASE]]

-- update changed column values
DO $BODY$
	DECLARE
		stmnt VARCHAR;
		rec_column RECORD;
	BEGIN
		RAISE INFO 'Processing values for updated columns';
		FOR rec_column IN 
			SELECT schema_name, old.table_name, old.column_name old_column_name, new.column_name new_column_name, new.data_type 
			FROM information_schema.schemata, information_schema.columns old, information_schema.columns new
			WHERE old.table_schema = schema_name
			  AND new.table_schema = schema_name
			  AND schema_owner = '<<1>>'
			  AND substr(old.column_name,1,1) = '_'
			  AND substr(old.column_name,2) = new.column_name
			ORDER BY schema_name, old.table_name, old.column_name
		LOOP
			BEGIN
				stmnt := 
					'UPDATE '||rec_column.schema_name||'.'||rec_column.table_name||
					' SET '||rec_column.new_column_name||'='||rec_column.old_column_name||'::VARCHAR::'||rec_column.data_type; 
				RAISE INFO '%',stmnt;
				EXECUTE stmnt;
			EXCEPTION
				WHEN OTHERS THEN RAISE INFO 'Update Failed';
			END;
		END LOOP;	
	END;
$BODY$;

\q
[[ENDBODY]]